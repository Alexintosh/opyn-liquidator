{"version":3,"sources":["utils/blockNative.js","utils/infura.js","utils/storage.js","constants/contracts.js","utils/web3.js","components/NavBar/ConnectButton.js","components/NavBar/SettingsButton.js","components/NavBar/index.js","components/HomePage/index.js","constants/options/calls.js","constants/tokens.js","constants/options/puts.js","constants/options/insurances.js","constants/options/index.js","components/common/AddressBlock.js","components/common/BalanceBlock.js","components/common/RatioTag.js","components/common/SectionTitle.js","components/common/MaxButton.js","components/common/HelpText.js","components/common/PriceSection.js","components/common/Comment.js","components/common/VaultButton.js","components/common/CheckBox.js","utils/tracker.js","components/AllContracts/index.js","components/Trade/index.js","utils/number.js","components/MyVaults/NoWallet.js","utils/graph.js","utils/calculation.js","components/MyVaults/index.js","components/types/index.js","components/OptionPage/ExerciseModal.js","components/OptionPage/VaultModal.js","components/OptionPage/VaultsList.js","components/OptionPage/OptionInfoBox.js","components/OptionPage/index.js","components/ManageVault/HeaderDashboard.js","components/ManageVault/CollateralManagement.js","components/ManageVault/IssuedTokenManagement.js","components/ManageVault/Liquidation.js","components/ManageVault/Exercise.js","components/ManageVault/UnderlyingManagement.js","components/ManageVault/index.js","components/UniswapTrade/Header.js","components/UniswapTrade/OptionExchange.js","components/UniswapTrade/AddLiquidity.js","components/UniswapTrade/RemoveLiquidity.js","components/UniswapTrade/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["notify","Notify","dappId","process","networkId","optionContractABI","require","optionExchangeABI","oracleABI","web3","Web3","ens","ENS","ETH_ADDR","resolveENS","ensName","a","console","log","resolver","addr","address","toLowerCase","getTokenBalance","erc20Token","user","oTokenContract","eth","Contract","methods","balanceOf","call","balance","getTotalSupply","erc20","token","totalSupply","getMaxLiquidatable","oToken","vaultOwner","maxOTokensLiquidatable","maxVaultLiquidatable","getUnderlyingRequiredToExercise","tokenToExercise","underlyingRequiredToExercise","underlyringRequired","getAllowance","contract","spender","allowance","getBalance","utils","fromWei","getPrice","oracleAddr","oracle","price","getPremiumToPay","exchangeAddr","tokenToBuy","buyAmt","paymentToken","exchange","premiumToPay","getPremiumReceived","tokenToSell","sellAmt","premiumReceived","getPreference","key","defaultValue","localStorage","getItem","storePreference","value","setItem","checkAddressAndAddToStorage","watch_addrs","usedAddresses","JSON","parse","includes","push","stringify","ETH_ADDRESS","KETH","oTokenABI","exchangeABI","uniswapExchangeABI","invokerABI","UINT256_MAX","onboard","Onboard","darkMode","subscriptions","wallet","provider","walletSelect","description","wallets","walletName","infuraKey","apiKey","updateModalMode","theme","config","connect","walletCheck","getState","disconnect","walletReset","checkConnectedAndGetAddress","checked","liquidate","oTokenAddr","owner","liquidateAmt","account","send","from","on","hash","kollateralLiquidate","optionExchange","amountOTokens","BigNumber","lte","Error","kollateralInvoker","data","abi","encodeParameters","invoke","burnOToken","burnAmt","burnOTokens","issueOToken","issueAmt","issueOTokens","addETHCollateral","ethAmt","toWei","toString","addERC20Collateral","collateral","collateralAmt","collateralAmtBN","lt","collateralToken","approve","removeCollateral","redeem","redeemVaultBalance","removeUnderlying","amt","exercise","underlying","amountToExercise","vaults","underlyingRequired","underlyingIsETH","openVault","buyOTokensFromExchange","buyOTokens","sellOTokensFromExchange","sellOTokens","addLiquidity","uniswapAddr","maxToken","minLiquidity","ethInWei","uniswapExchange","deadline","Math","ceil","Date","now","removeLiquidity","pool_token_amount","min_eth_wei","min_tokens","ConnectButton","setUser","useState","isConnected","setIsConnected","connectWeb3","disconnectWeb3","style","paddingTop","paddingRight","onClick","size","padding","entity","icon","label","ChangeMode","updateTheme","LinkButton","title","isSelected","paddingLeft","opacity","fontSize","NavBar","history","useHistory","isHome","updateIsHome","useEffect","home","location","pathname","primary","height","goBack","secondary","MainButton","iconUrl","width","alt","src","HomePage","display","alignItems","marginRight","marginLeft","eth_calls","USDC","decimals","symbol","OPYN_ETH","cDAI","eth_puts","name","tokens","strike","strikePrice","minRatio","expiry","insurances","eth_options","concat","allOptions","AddressBlock","shorten","BalanceBlock","asset","integer","digits","gt","str","split","length","RatioTag","isSafe","ratio","useCollateral","background","color","mode","defaultProps","SectionTitle","MaxButton","HelperText","parseFloat","toFixed","PriceSection","forceDisplay","amtBN","toNumber","Comment","text","ManageVaultButton","OpenVaultButton","goToMangePage","openAndGoToVault","MyCheckBox","onCheck","useTheme","CheckBoxWrapper","onChange","paddingBottom","styled","div","props","surfaceContentSecondary","ReactGA","initialize","AllContracts","tracker","pageview","storedOptionTab","storedShowExpired","parseInt","tabSelected","setTabSelected","showExpired","setShowExpired","goToToken","CheckBox","items","selected","choice","fields","entries","filter","option","entriesPerPage","renderEntry","header","toDateString","TradeLanding","goToTrade","toBaseUnitBN","rawAmt","raw","base","decimalsBN","times","pow","integerValue","toTokenUnitsBN","tokenAmount","tokenDecimals","formatDigits","num","percision","timeSince","timeStamp","secondsPast","getTime","ts","day","getDate","month","match","replace","year","getFullYear","compareVaultRatio","vaultA","vaultB","rateA","rateB","comparison","compareVaultIssued","amountA","oTokensIssued","amountB","isAddress","PleaseLogin","setWatchAddress","toast","useToast","InAddress","setAddress","placeholder","e","target","wide","reverse","scale","radius","fontFamily","getAllVaultsForOption","optionAddress","query","postQuery","response","getAllVaultsForUser","actions","getVault","vault","getLiquidationHistory","liquidationActionsQuery","liquidateActions","getExerciseHistory","exerciseActions","getRemoveUnderlyingHistory","removeUnderlyingActions","options","method","headers","body","fetch","res","json","calculateStrikeValueInCollateral","collateralDecimals","strikeValueInWei","strikeValueInCollateral","collateralValueInWei","calculateRatio","tokenIssued","Infinity","colalteralBN","tokenIssuedBN","strikePriceBN","Promise","MyVaults","opendVaults","setOpenedVaults","tokensToOpen","setTokensToOpen","isLoading","setIsLoading","watchAddress","isWatchMode","hasAddressConnected","showEmpty","setShowEmpty","displayVaults","useMemo","userVaults","openedVaults","notOpenedTokens","map","entry","find","optionsContract","undefined","oTokenName","sort","NoWallet","PropTypes","shape","string","isRequired","number","ExerciseModal","o","userUnderlyingBalance","setUserUnderlyingBalance","userOTokenBalance","setUserOTokenBalance","opened","setOpened","exerciseAmount","setExerciseAmount","setUnderlyringRequired","nonEmptyVaults","selectedIndexes","setSelectedIndexes","selectedHasEnoughCollateral","setHasEnoughCollateral","userUnderlying","userOTkns","checkHasEnoughToken","sumIssued","reduce","accumulator","current","plus","gte","onChangeExerciseAmt","amount","exeAmtBN","underlyingRawAmt","index","visible","onClose","heading","type","adornment","adornmentPosition","event","renderSelectionCount","count","selection","onSelectEntries","indexes","disabled","vaultowners","VaultModal","collateralIsETH","addValue","setAddValue","setLiquidateAmt","isCancelled","maxLiquidatable","getData","catch","error","justifyContent","VaultOwnerList","vaultUsesCollateral","vaultsWithDetail","setVaultDetail","page","setPage","updateInfo","vaultDetail","id","setInterval","clearInterval","onPageChange","status","OptionOverview","totalCollateral","setTotalCollateral","setTotalSupply","totalCollt","rawCollateralBalance","supply","init","toFormat","OptionPage","useParams","setVaults","allVaults","OptionInfoBox","VaultsList","HeaderDashboard","newRatio","tokenInUnit","collateralBalance","CollateralManagement","isOwner","collateralAssetBalance","strikeValue","setNewRatio","addCollateralAmt","setAddCollateralAmt","removeCollateralAmt","setRemoveCollateralAmt","updateNewRatio","newCollateral","amtRaw","newCollateralInWei","collateralBalanceRaw","newCollateralWei","minus","minRatioBN","minCollateral","maxToRemove","maxToRemoveInTokenUnit","IssuedTokenManagement","tokenBalance","setIssueAmt","setBurnAmt","newAmt","intputAmt","amountBN","onChangeIssueAmt","maxToIssueRaw","maxToIssue","onChangeBurnAmt","issued","maxToBurn","LiquidationHistory","userTokenBalance","setMaxLiquidatable","setEntries","amountToLiquidate","setAmtToLiquidate","maxToLiquidate","updateLiquidatable","actionsForThisVault","actionA","actionB","timestamp","updateList","maximum","min","amtToLiquidate","collateralToPay","liquidator","transactionHash","transaction","ExerciseHistory","amtCollateralToPay","oTokensToExercise","exerciser","RemoveUnderlying","underlyingDecimals","underlyingAmount","ManageVault","setVault","setStrikeValue","setRatio","ownerTokenBalance","setOwnerTokenBalance","setUserTokenBalance","userCollateralAssetBalance","setUserCollateralAssetBalance","noVault","setNoVault","vaultToManage","all","_ownerTokenBalance","_userTokenBalance","userColltBalance","ownerTokenBalanceBN","userTokenBalanceBN","strikeValInCollt","currentRatio","end","Liquidation","Exercise","UnderlyingManagement","TradePageHeader","poolETHBalance","poolTokenBalance","OptionExchange","setBuyAmt","setSellAmt","setPremiumToPay","setPremiumReceived","updatePremiumToPay","butAmountBN","premium","updatePremiumReceived","sellAmountBN","AddLiquidity","otoken","otokenSymbol","otokenDecimals","userETHBalance","liquidityTokenDecimals","liquidityTokenSupply","amtETHToAdd","setAmtETHToAdd","amtTokenToAdd","setAmtTokenToAdd","liquidityMinted","liquidityMintedMin","ethToTokenRatio","tokenToEthRatio","onChangeTokenAmtToSend","tokenAmt","newEthAmt","newTokenAmt","onChangeETHAmtToSend","ethWei","RemoveLiquidity","userliquidityTokenBalance","amtLiquidityTokenToSell","setAmtLiquidityTokenToSell","poolPortion","estETHRecieved","estOTokenReceived","minETHReceived","minTokenReceived","tokenAmtBN","min_eth","min_token","UniswapPool","setPoolTokenBalance","setPoolETHBalance","setUserETHBalance","setUserLiquidityTokenBalance","setLiquidityTokenSupply","updatePoolInfo","exTokenBalance","exchagneETHBalance","liqTokenTotalSupply","exchangeTokenBalance","updateUserInfo","userEthBalance","liqTokenBalance","userOTknBalanceBN","userLiqTknBalanceBN","Footer","backgroundColor","textAlign","position","left","bottom","external","href","App","storedTheme","setTheme","assetsUrl","newTheme","path","Trade","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"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","file":"static/js/main.175d612e.chunk.js","sourcesContent":["import Notify from 'bnc-notify';\n\nconst BLOCKNATIVE_KEY = process.env.REACT_APP_BLOCKNATIVE_KEY;\n\n// eslint-disable-next-line import/prefer-default-export\nexport const notify = Notify({\n  dappId: BLOCKNATIVE_KEY,\n  networkId: 1,\n});\n","import Web3 from 'web3';\n\nimport ENS from 'ethereum-ens';\n\nconst optionContractABI = require('../constants/abi/OptionContract.json');\nconst optionExchangeABI = require('../constants/abi/OptionExchange.json');\nconst oracleABI = require('../constants/abi/Oracle.json');\n\nconst INFURA_KEY = process.env.REACT_APP_INFURA_KEY;\n\nconst web3 = new Web3(`https://mainnet.infura.io/v3/${INFURA_KEY}`);\nconst ens = new ENS(web3);\n\nconst ETH_ADDR = '0x0000000000000000000000000000000000000000';\n\n// ENS\nexport const resolveENS = async (ensName) => {\n  console.log('infura resolve ETNS');\n  const address = await ens.resolver(ensName).addr();\n  return address.toLowerCase();\n};\n\n/**\n *\n * @param {string} erc20Token address\n * @param {string} user address\n * @return {Promise<string>}\n */\nexport const getTokenBalance = async (erc20Token, user) => {\n  if (user === '') return '0';\n  console.log(`infura getTokenBalance ${erc20Token} for ${user}`);\n  const oTokenContract = new web3.eth.Contract(optionContractABI, erc20Token);\n  const balance = await oTokenContract.methods.balanceOf(user).call();\n  return balance;\n};\n\nexport const getDecimals = async (erc20Token) => {\n  console.log(`infura getDecimals ${erc20Token}`);\n  if (erc20Token === ETH_ADDR) return 18;\n  const oTokenContract = new web3.eth.Contract(optionContractABI, erc20Token);\n  const decimals = await oTokenContract.methods.decimals().call();\n  return parseInt(decimals, 10);\n};\n\nexport const getERC20Symbol = async (erc20Token) => {\n  console.log(`infura getERC20Symbol ${erc20Token}`);\n  const oTokenContract = new web3.eth.Contract(optionContractABI, erc20Token);\n  return oTokenContract.methods.symbol().call();\n};\n\nexport const getTotalSupply = async (erc20) => {\n  console.log('get total supply');\n  const token = new web3.eth.Contract(optionContractABI, erc20);\n  const totalSupply = await token.methods.totalSupply().call();\n  return totalSupply;\n};\n\n// Option Contract\n\n/**\n * Max liquidatable for given vault\n * @param {string} oToken\n * @param {string} owner\n * @return {Promise<number>}\n */\nexport const getMaxLiquidatable = async (oToken, vaultOwner) => {\n  console.log(`infura getMaxLiquidatable ${oToken}`);\n  const oTokenContract = new web3.eth.Contract(optionContractABI, oToken);\n  const maxVaultLiquidatable = await oTokenContract.methods\n    .maxOTokensLiquidatable(vaultOwner)\n    .call();\n  return maxVaultLiquidatable;\n};\n\n/**\n *\n * @param {string} oToken\n * @param {string} tokenToExercise\n * @return {Promise<string>}\n */\nexport const getUnderlyingRequiredToExercise = async (oToken, tokenToExercise) => {\n  console.log(`infura getUnderlyingRequiredToExercise ${oToken}`);\n  const oTokenContract = new web3.eth.Contract(optionContractABI, oToken);\n  const underlyringRequired = await oTokenContract.methods\n    .underlyingRequiredToExercise(tokenToExercise)\n    .call();\n  // console.log(`what `, underlyringRequired)\n  return underlyringRequired;\n};\n\n/**\n *\n * @param {string} contract\n * @param {string} user\n * @param {string} spender\n * @return {Promise<string>}\n */\nexport const getAllowance = async (contract, user, spender) => {\n  console.log('infura get Allowance');\n  const token = new web3.eth.Contract(optionContractABI, contract);\n  const allowance = await token.methods.allowance(user, spender).call();\n  return allowance;\n};\n\n/**\n * Get balance in eth for the account\n * @param {string} address\n */\nexport const getBalance = async (address) => {\n  if (address === '') return '0';\n  console.log(`infura getBalance ${address}`);\n  const balance = await web3.eth.getBalance(address);\n  return web3.utils.fromWei(balance);\n};\n\n/**\n * Get price of token in unit of wei\n * @param {string} oracleAddr\n * @param {string} token\n * @returns {Promise<string>}\n */\nexport const getPrice = async (oracleAddr, token) => {\n  console.log(`infura getPrice ${token}`);\n  const oracle = new web3.eth.Contract(oracleABI, oracleAddr);\n  const price = await oracle.methods.getPrice(token).call();\n  return price; // unit: wei/ per token\n};\n\n// Option Exchange\nexport const getPremiumToPay = async (\n  exchangeAddr,\n  tokenToBuy,\n  buyAmt,\n  paymentToken = ETH_ADDR,\n) => {\n  console.log('infura getPremiumToPay');\n  const exchange = new web3.eth.Contract(optionExchangeABI, exchangeAddr);\n  const premiumToPay = await exchange.methods.premiumToPay(tokenToBuy, paymentToken, buyAmt).call();\n  return premiumToPay;\n};\n\nexport const getPremiumReceived = async (exchangeAddr, tokenToSell, sellAmt) => {\n  console.log('infura getPremiumReceived');\n  const exchange = new web3.eth.Contract(optionExchangeABI, exchangeAddr);\n  const payoutToken = ETH_ADDR;\n  const premiumReceived = await exchange.methods\n    .premiumReceived(tokenToSell, payoutToken, sellAmt)\n    .call();\n  return web3.utils.fromWei(premiumReceived);\n};\n\n// uniswapExchange\n","/**\n * Get value by key\n * @param {string} key\n * @param {string} defaultValue\n */\nexport function getPreference(key, defaultValue) {\n  return localStorage.getItem(key) || defaultValue;\n}\n\n/**\n * store value to storage\n * @param {string} key\n * @param {string} value\n */\nexport function storePreference(key, value) {\n  localStorage.setItem(key, value);\n}\n\nexport function checkAddressAndAddToStorage(address) {\n  const watch_addrs = getPreference('watch_addresses', '[]');\n  const usedAddresses = JSON.parse(watch_addrs);\n  if (!usedAddresses.includes(address.toLowerCase()) && !usedAddresses.includes(address)) {\n    usedAddresses.push(address);\n    storePreference('watch_addresses', JSON.stringify(usedAddresses));\n  }\n}\n","/* eslint-disable camelcase */\n\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000';\nexport const ERC20_Liquidator = '0xF8cE4E70F52FdDBc72547Ce9616ed3E7d4525e8A';\nexport const Kollateral_Liquidator = '0xfBaB30f79bbbC92C708E7e9b01E329e003d8Ce48';\n\nexport const AAVE_LENDING = '0x398eC7346DcD622eDc5ae82352F02bE94C62d119';\nexport const Kollateral_Invoker = '0x06d1f34fd7c055ae5ca39aa8c6a8e10100a45c01';\n\nexport const DAI = '0x6b175474e89094c44da98b954eedeac495271d0f';\nexport const USDC = '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48';\nexport const KETH = '0x0000000000000000000000000000000000000001';\n","/* eslint-disable camelcase */\nimport Web3 from 'web3';\nimport BigNumber from 'bignumber.js';\nimport Onboard from 'bnc-onboard';\n\nimport { notify } from './blockNative';\nimport { getAllowance, getPremiumToPay } from './infura';\nimport { getPreference } from './storage';\nimport {\n  ETH_ADDRESS, Kollateral_Liquidator, Kollateral_Invoker, KETH,\n} from '../constants/contracts';\n\nconst oTokenABI = require('../constants/abi/OptionContract.json');\nconst exchangeABI = require('../constants/abi/OptionExchange.json');\nconst uniswapExchangeABI = require('../constants/abi/UniswapExchange.json');\nconst invokerABI = require('../constants/abi/KollateralInvoker.json');\n\nconst DEADLINE_FROM_NOW = 60 * 15;\nconst UINT256_MAX = '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff';\n\nconst INFURA_KEY = process.env.REACT_APP_INFURA_KEY;\nconst BLOCKNATIVE_KEY = process.env.REACT_APP_BLOCKNATIVE_KEY;\nconst FORTMATIC_KEY = process.env.REACT_APP_FORTMATIC_KEY;\n\nconsole.log(`using key ${INFURA_KEY}`);\n\nlet web3;\n\nconst onboard = Onboard({\n  darkMode: getPreference('theme', 'light') === 'dark',\n  dappId: BLOCKNATIVE_KEY, // [String] The API key created by step one above\n  networkId: 1, // [Integer] The Ethereum network ID your Dapp uses.\n  subscriptions: {\n    wallet: (wallet) => {\n      web3 = new Web3(wallet.provider);\n    },\n  },\n  walletSelect: {\n    description: 'Please select a wallet to connect to Opyn Monitor',\n    wallets: [\n      { walletName: 'metamask' },\n      {\n        walletName: 'walletConnect',\n        infuraKey: INFURA_KEY,\n      },\n      {\n        walletName: 'fortmatic',\n        apiKey: FORTMATIC_KEY,\n      },\n      { walletName: 'trust' },\n      { walletName: 'coinbase' },\n      { walletName: 'status' },\n    ],\n  },\n});\n\n\nexport const updateModalMode = async (theme) => {\n  const darkMode = theme === 'dark';\n  onboard.config({ darkMode });\n};\n\nexport const connect = async () => {\n  const selected = await onboard.walletSelect();\n  if (!selected) return false;\n  const checked = await onboard.walletCheck();\n  if (!checked) return false;\n  return onboard.getState().address;\n};\n\nexport const disconnect = async () => {\n  onboard.walletReset();\n};\n\n// eslint-disable-next-line consistent-return\nexport const checkConnectedAndGetAddress = async () => {\n  let checked = false;\n  try {\n    checked = await onboard.walletCheck();\n  } catch (error) {\n    await onboard.walletSelect();\n    checked = await onboard.walletCheck();\n  } finally {\n    // eslint-disable-next-line no-unsafe-finally\n    if (checked) return onboard.getState().address;\n  }\n};\n\nexport const liquidate = async (oTokenAddr, owner, liquidateAmt) => {\n  const account = await checkConnectedAndGetAddress();\n  const oToken = new web3.eth.Contract(oTokenABI, oTokenAddr);\n\n  await oToken.methods\n    .liquidate(owner, liquidateAmt)\n    .send({ from: account })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\n/**\n *\n * @param {string} oTokenAddr\n * @param {string} optionExchange\n * @param {string} owner\n * @param {string} paymentToken payment token address\n */\nexport const kollateralLiquidate = async (oTokenAddr, optionExchange, owner, paymentToken) => {\n  const account = await checkConnectedAndGetAddress();\n\n  const oToken = new web3.eth.Contract(oTokenABI, oTokenAddr);\n  const amountOTokens = await oToken.methods.maxOTokensLiquidatable(owner).call();\n\n  if (new BigNumber(amountOTokens).lte(new BigNumber(0))) {\n    throw new Error('Nothing to liquidate');\n  }\n\n  const premiumToPay = await getPremiumToPay(\n    optionExchange, // exchange\n    oTokenAddr,\n    amountOTokens,\n    paymentToken === KETH ? ETH_ADDRESS : paymentToken,\n  );\n\n  const kollateralInvoker = new web3.eth.Contract(invokerABI, Kollateral_Invoker);\n\n  const data = web3.eth.abi.encodeParameters(['address', 'address'], [owner, oTokenAddr]);\n  await kollateralInvoker.methods\n    .invoke(\n      Kollateral_Liquidator, // invokeTo\n      data, // invokeData\n      paymentToken, // tokenAddress: Dai, ETH,\n      premiumToPay,\n    )\n    .send({ from: account })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\nexport const burnOToken = async (oTokenAddr, burnAmt) => {\n  const account = await checkConnectedAndGetAddress();\n  const oToken = new web3.eth.Contract(oTokenABI, oTokenAddr);\n  await oToken.methods\n    .burnOTokens(burnAmt)\n    .send({ from: account })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\nexport const issueOToken = async (oTokenAddr, issueAmt) => {\n  const account = await checkConnectedAndGetAddress();\n  const oToken = new web3.eth.Contract(oTokenABI, oTokenAddr);\n\n  await oToken.methods\n    .issueOTokens(issueAmt, account)\n    .send({ from: account })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\nexport const addETHCollateral = async (oTokenAddr, owner, ethAmt) => {\n  const account = await checkConnectedAndGetAddress();\n  const oToken = new web3.eth.Contract(oTokenABI, oTokenAddr);\n  await oToken.methods\n    .addETHCollateral(owner)\n    .send({ from: account, value: web3.utils.toWei(ethAmt.toString()) })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\n/**\n *\n * @param {string} collaral\n * @param {string} oTokenAddr\n * @param {string} owner\n * @param {number|string} collateralAmt in min unit\n */\nexport const addERC20Collateral = async (collateral, oTokenAddr, owner, collateralAmt) => {\n  const collateralAmtBN = new BigNumber(collateralAmt);\n  const account = await checkConnectedAndGetAddress();\n  const oToken = new web3.eth.Contract(oTokenABI, oTokenAddr);\n  const allowance = await getAllowance(collateral, account, oTokenAddr);\n  // Approve to move collateral\n  if (new BigNumber(allowance).lt(collateralAmtBN)) {\n    const collateralToken = new web3.eth.Contract(oTokenABI, collateral);\n    await collateralToken.methods\n      .approve(oTokenAddr, UINT256_MAX)\n      .send({ from: account })\n      .on('transactionHash', (hash) => {\n        notify.hash(hash);\n      });\n  }\n  await oToken.methods\n    .addERC20Collateral(owner, collateralAmtBN.toString())\n    .send({ from: account })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\n/**\n *\n * @param {string} collateral\n * @param {string} oTokenAddr\n * @param {string} collateralAmt in base unit\n */\nexport const removeCollateral = async (collateral, oTokenAddr, collateralAmt) => {\n  const account = await checkConnectedAndGetAddress();\n  const oToken = new web3.eth.Contract(oTokenABI, oTokenAddr);\n  if (collateral === ETH_ADDRESS) {\n    await oToken.methods\n      .removeCollateral(collateralAmt)\n      .send({ from: account })\n      .on('transactionHash', (hash) => {\n        notify.hash(hash);\n      });\n  } else {\n    await oToken.methods\n      .removeCollateral(collateralAmt)\n      .send({ from: account })\n      .on('transactionHash', (hash) => {\n        notify.hash(hash);\n      });\n  }\n};\n\nexport const redeem = async (token) => {\n  const account = await checkConnectedAndGetAddress();\n  const oToken = new web3.eth.Contract(oTokenABI, token);\n  await oToken.methods\n    .redeemVaultBalance()\n    .send({ from: account })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\n/**\n *\n * @param {string} token\n */\nexport const removeUnderlying = async (token) => {\n  const account = await checkConnectedAndGetAddress();\n  const oToken = new web3.eth.Contract(oTokenABI, token);\n  await oToken.methods\n    .removeUnderlying()\n    .send({ from: account })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\nexport const approve = async (oTokenAddr, spender, amt) => {\n  const account = await checkConnectedAndGetAddress();\n  const oToken = new web3.eth.Contract(oTokenABI, oTokenAddr);\n  await oToken.methods\n    .approve(spender, amt)\n    .send({ from: account })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\n/**\n * Exercise your oTokens\n * @param {string} oTokenAddr\n * @param {string} underlying asset type\n * @param {string} amountToExercise\n * @param {string[]} vaults vault owners\n */\nexport const exercise = async (oTokenAddr, underlying, amountToExercise, vaults) => {\n  const account = await checkConnectedAndGetAddress();\n  const oToken = new web3.eth.Contract(oTokenABI, oTokenAddr);\n  const underlyingRequired = await oToken.methods\n    .underlyingRequiredToExercise(amountToExercise)\n    .call();\n\n  const underlyingIsETH = underlying === ETH_ADDRESS;\n\n  if (!underlyingIsETH) {\n    const allowance = await getAllowance(underlying, account, oTokenAddr);\n    if (new BigNumber(allowance).lt(new BigNumber(underlyingRequired))) {\n      await approve(underlying, oTokenAddr, UINT256_MAX);\n    }\n  }\n\n  await oToken.methods\n    .exercise(amountToExercise, vaults)\n    .send({ from: account, value: underlyingIsETH ? underlyingRequired : '0' })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\nexport const openVault = async (oTokenAddr) => {\n  const account = await checkConnectedAndGetAddress();\n  const oToken = new web3.eth.Contract(oTokenABI, oTokenAddr);\n  await oToken.methods\n    .openVault()\n    .send({ from: account })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\n// Option Exchange\n\nexport const buyOTokensFromExchange = async (oTokenAddr, exchangeAddr, buyAmt, ethAmt) => {\n  const account = await checkConnectedAndGetAddress();\n  const exchange = new web3.eth.Contract(exchangeABI, exchangeAddr);\n  await exchange.methods\n    .buyOTokens(\n      account,\n      oTokenAddr,\n      '0x0000000000000000000000000000000000000000', // payment\n      buyAmt,\n    )\n    .send({ from: account, value: ethAmt })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\nexport const sellOTokensFromExchange = async (oTokenAddr, exchangeAddr, sellAmt) => {\n  const account = await checkConnectedAndGetAddress();\n  const allowance = await getAllowance(oTokenAddr, account, exchangeAddr);\n  if (new BigNumber(allowance).lt(new BigNumber(sellAmt))) {\n    await approve(oTokenAddr, exchangeAddr, UINT256_MAX);\n  }\n  const exchange = new web3.eth.Contract(exchangeABI, exchangeAddr);\n  await exchange.methods\n    .sellOTokens(\n      account,\n      oTokenAddr,\n      '0x0000000000000000000000000000000000000000', // payment\n      sellAmt,\n    )\n    .send({ from: account })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\n// Uniswap Exchange\n\n/**\n *\n */\nexport const addLiquidity = async (oToken, uniswapAddr, maxToken, minLiquidity, ethInWei) => {\n  const account = await checkConnectedAndGetAddress();\n  const allowance = await getAllowance(oToken, account, uniswapAddr);\n  if (new BigNumber(allowance).lt(new BigNumber(maxToken))) {\n    await approve(oToken, uniswapAddr, UINT256_MAX);\n  }\n  const uniswapExchange = new web3.eth.Contract(uniswapExchangeABI, uniswapAddr);\n  const deadline = Math.ceil(Date.now() / 1000) + DEADLINE_FROM_NOW;\n  await uniswapExchange.methods\n    .addLiquidity(\n      minLiquidity, // min_liquidity\n      maxToken, // max_tokens\n      deadline, // deadline\n    )\n    .send({ from: account, value: ethInWei })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n\n/**\n *\n */\nexport const removeLiquidity = async (uniswapAddr, pool_token_amount, min_eth_wei, min_tokens) => {\n  const account = await checkConnectedAndGetAddress();\n  const uniswapExchange = new web3.eth.Contract(uniswapExchangeABI, uniswapAddr);\n  const deadline = Math.ceil(Date.now() / 1000) + DEADLINE_FROM_NOW;\n  await uniswapExchange.methods\n    .removeLiquidity(pool_token_amount, min_eth_wei, min_tokens, deadline)\n    .send({\n      from: account,\n    })\n    .on('transactionHash', (hash) => {\n      notify.hash(hash);\n    });\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button, IdentityBadge, IconConnect, Box, IconPower, LinkBase,\n} from '@aragon/ui';\n\nimport { connect, disconnect } from '../../utils/web3';\nimport { checkAddressAndAddToStorage } from '../../utils/storage';\n\nfunction ConnectButton({ user, setUser }) {\n  const [isConnected, setIsConnected] = useState(false);\n\n  const connectWeb3 = async () => {\n    const address = await connect();\n    if (address === false) return;\n    setIsConnected(true);\n    setUser(address);\n    checkAddressAndAddToStorage(address);\n  };\n\n  const disconnectWeb3 = async () => {\n    await disconnect();\n    setIsConnected(false);\n    setUser('');\n  };\n\n  return isConnected ? (\n    <>\n      <div style={{ paddingTop: 5, paddingRight: 5 }}>\n        <LinkBase onClick={disconnectWeb3} size=\"small\">\n          {' '}\n          <IconPower />\n          {' '}\n        </LinkBase>\n      </div>\n      <Box padding={6}>\n        <IdentityBadge entity={user} />\n      </Box>\n\n    </>\n  ) : (\n    <Button icon={<IconConnect />} label=\"Connect\" onClick={connectWeb3} />\n  );\n}\n\nConnectButton.propTypes = {\n  user: PropTypes.string.isRequired,\n  setUser: PropTypes.func.isRequired,\n};\n\nexport default ConnectButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, IconStarFilled, IconStar } from '@aragon/ui';\n\nfunction ChangeMode({ theme, updateTheme }) {\n  const handleChangeTheme = () => {\n    if (theme === 'light') updateTheme('dark');\n    else updateTheme('light');\n  };\n\n  return (\n    <Button\n      icon={theme === 'dark' ? <IconStar /> : <IconStarFilled />}\n      onClick={handleChangeTheme}\n      label=\"Theme\"\n    />\n  );\n}\n\nChangeMode.propTypes = {\n  theme: PropTypes.string.isRequired,\n  updateTheme: PropTypes.func.isRequired,\n};\n\nexport default ChangeMode;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\n\nimport { Bar, BackButton, LinkBase } from '@aragon/ui';\nimport ConnectButton from './ConnectButton';\nimport ChangeModeButton from './SettingsButton';\n\nfunction NavBar({\n  theme, updateTheme, user, setUser,\n}) {\n  const history = useHistory();\n  const [isHome, updateIsHome] = useState(true);\n\n  useEffect(() => {\n    const home = history.location.pathname === '/';\n    updateIsHome(home);\n  }, [history.location.pathname]);\n  return (\n    <Bar\n      primary={\n        isHome ? (\n          <></>\n        ) : (\n          <>\n            <div style={{ height: '100%' }}>\n              <BackButton\n                onClick={() => {\n                  history.goBack();\n                }}\n              />\n            </div>\n            <LinkButton\n              title=\"Home\"\n              onClick={() => {\n                history.push('/');\n              }}\n              isSelected={history.location.pathname === '/'}\n            />\n            <LinkButton\n              title=\"My Vaults\"\n              onClick={() => {\n                history.push('/myvaults/');\n              }}\n              isSelected={history.location.pathname === '/myvaults/'}\n            />\n            <LinkButton\n              title=\"All Contracts\"\n              onClick={() => {\n                history.push('/options/');\n              }}\n              isSelected={history.location.pathname === '/options/'}\n            />\n            <LinkButton\n              title=\"Trade\"\n              onClick={() => {\n                history.push('/trade/');\n              }}\n              isSelected={history.location.pathname === '/trade/'}\n            />\n          </>\n        )\n      }\n      secondary={(\n        <>\n          <ConnectButton user={user} setUser={setUser} />\n          <ChangeModeButton theme={theme} updateTheme={updateTheme} />\n        </>\n      )}\n    />\n  );\n}\n\n\nNavBar.propTypes = {\n  theme: PropTypes.string.isRequired,\n  updateTheme: PropTypes.func.isRequired,\n  user: PropTypes.string.isRequired,\n  setUser: PropTypes.func.isRequired,\n};\n\nfunction LinkButton({ title, onClick, isSelected = false }) {\n  return (\n    <div style={{ paddingLeft: 40 }}>\n      <LinkBase onClick={onClick}>\n        <div style={{ padding: '1%', opacity: isSelected ? 1 : 0.5, fontSize: 17 }}>{title}</div>\n      </LinkBase>\n    </div>\n  );\n}\n\nLinkButton.propTypes = {\n  title: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n  isSelected: PropTypes.bool.isRequired,\n};\n\nexport default NavBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useHistory } from 'react-router-dom';\nimport { Header, Box, LinkBase } from '@aragon/ui';\n\nfunction HomePage() {\n  const history = useHistory();\n\n  return (\n    <>\n      <Header primary=\"Welcome to Opyn Monitor\" />\n      <div style={{ padding: 5, opacity: 0.5 }}> Tools for DeFi Risk Management. </div>\n      <div style={{ padding: '1%', display: 'flex', alignItems: 'center' }}>\n        <div style={{ width: '30%', marginRight: '3%' }}>\n          <MainButton\n            title=\"My Vaults\"\n            description=\"Manage collateral, Mint/Burn oTokens\"\n            iconUrl=\"https://opyn.co/static/media/1.68813886.svg\"\n            onClick={() => {\n              history.push('/myvaults');\n            }}\n          />\n        </div>\n\n        <div style={{ width: '30%' }}>\n          <MainButton\n            title=\"All Contracts\"\n            description=\" Monitor and liquidate vaults.\"\n            iconUrl=\"https://opyn.co/static/media/2.18d22be0.svg\"\n            onClick={() => {\n              history.push('/options/');\n            }}\n          />\n        </div>\n\n        <div style={{ width: '30%', marginLeft: '3%' }}>\n          <MainButton\n            title=\"Trade\"\n            description=\"Buy, Sell or Provided Liquidity.\"\n            iconUrl=\"https://opyn.co/static/media/3.4da8b24d.svg\"\n            onClick={() => {\n              history.push('./trade');\n            }}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n\nfunction MainButton({\n  title, description, iconUrl, onClick,\n}) {\n  return (\n    <LinkBase onClick={onClick} style={{ width: '100%' }}>\n      <Box>\n        <div style={{ padding: 10, fontSize: 18 }}>{title}</div>\n        <img alt=\"icon\" style={{ padding: 10, height: 64 }} src={iconUrl} />\n        <div style={{ paddingTop: 5, opacity: 0.5 }}>\n          {' '}\n          {description}\n          {' '}\n        </div>\n\n      </Box>\n    </LinkBase>\n  );\n}\n\nMainButton.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  iconUrl: PropTypes.string.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default HomePage;\n","/* eslint-disable import/prefer-default-export */\n\nexport const eth_calls = [];\n","export const USDC = {\n  addr: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\n  decimals: 6,\n  symbol: 'USDC',\n};\n\nexport const OPYN_ETH = {\n  addr: '0x0000000000000000000000000000000000000000',\n  decimals: 18,\n  symbol: 'ETH',\n};\n\nexport const cDAI = {\n  addr: '0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643',\n  decimals: 8,\n  symbol: 'cDai',\n};\n\nexport const cUSDC = {\n  addr: '0x39AA39c021dfbaE8faC545936693aC917d5E7563',\n  decimals: 8,\n  symbol: 'cUSDC',\n};\n\nexport const CurveFi = {\n  addr: '0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8',\n  decimals: 18,\n  symbol: 'yDAI+yUSDC+yUSDT+yTUSD',\n};\n","/* eslint-disable import/prefer-default-export */\nimport * as tokens from '../tokens';\n\nexport const eth_puts = [\n  {\n    addr: '0x48ab8a7d3bf2eb942e153e4275ae1a8988238dc7',\n    title: 'ETH Put $100 04/03/20',\n\n    // constants in contract\n    symbol: 'oETH $100 Put',\n    name: 'Opyn ETH Put $100 04/03/20',\n    decimals: 8,\n    oracle: '0x7054e08461e3eCb7718B63540adDB3c3A1746415',\n    collateral: tokens.USDC,\n    underlying: tokens.OPYN_ETH,\n    strike: tokens.USDC,\n    strikePrice: 1e-6,\n    minRatio: 1,\n    exchange: '0x39246c4f3f6592c974ebc44f80ba6dc69b817c71',\n    uniswapExchange: '0x30651Fc7F912f5E40AB22F3D34C2159431Fb1c4F',\n    expiry: 1585958340,\n  },\n  {\n    addr: '0x6c79f10543c7886c6946b8a996f824e474bac8f2',\n    title: 'ETH Put $100 04/24/20',\n\n    // constants in contract\n    symbol: 'oETH $100 Put',\n    name: 'Opyn ETH Put $100 04/24/20',\n    decimals: 8,\n    oracle: '0x7054e08461e3eCb7718B63540adDB3c3A1746415',\n    collateral: tokens.USDC,\n    underlying: tokens.OPYN_ETH,\n    strike: tokens.USDC,\n    strikePrice: 1e-6,\n    minRatio: 1,\n    exchange: '0x39246c4f3f6592c974ebc44f80ba6dc69b817c71',\n    uniswapExchange: '0x5734a78b1985B47dF3fbf1736c278F57c2C30983',\n    expiry: 1587715200,\n  },\n  {\n    addr: '0xaefc7b368f7b536c9e5e3f342bf534931ce58584',\n    title: 'ETH Put $150 04/24/20',\n\n    // constants in contract\n    symbol: 'oETH $150 Put',\n    name: 'Opyn ETH Put $150 04/24/20',\n    decimals: 7,\n    oracle: '0x7054e08461e3eCb7718B63540adDB3c3A1746415',\n    collateral: tokens.USDC,\n    underlying: tokens.OPYN_ETH,\n    strike: tokens.USDC,\n    strikePrice: 1.5e-5,\n    minRatio: 1,\n    exchange: '0x39246c4f3f6592c974ebc44f80ba6dc69b817c71',\n    uniswapExchange: '0xD2840757B0DeF8fBC2A7DC990CEF75975C2d3F0e',\n    expiry: 1587715200,\n  },\n  {\n    addr: '0x461cd647add2159e85ad57141cb5371566fceed3',\n    title: 'ETH Put $160 05/01/20',\n\n    // constants in contract\n    symbol: 'oETH $160 Put',\n    name: 'Opyn ETH Put $160 05/01/20',\n    decimals: 7,\n    oracle: '0x7054e08461e3eCb7718B63540adDB3c3A1746415',\n    collateral: tokens.USDC,\n    underlying: tokens.OPYN_ETH,\n    strike: tokens.USDC,\n    strikePrice: 1.6e-5,\n    minRatio: 1,\n    exchange: '0x39246c4f3f6592c974ebc44f80ba6dc69b817c71',\n    uniswapExchange: '0xd03f7298aE74a8618711Ec43F45Ad2225F141aa4',\n    expiry: 1588320000,\n  },\n];\n","import * as tokens from '../tokens';\n\n/* eslint-disable import/prefer-default-export */\nexport const insurances = [\n  {\n    title: 'cDai Insurance',\n    addr: '0x98cc3bd6af1880fcfda17ac477b2f612980e5e33',\n    symbol: 'ocDai',\n    name: 'Opyn cDai Insurance',\n    decimals: 8,\n    oracle: '0x7054e08461e3eCb7718B63540adDB3c3A1746415',\n    collateral: tokens.OPYN_ETH,\n    underlying: tokens.cDAI,\n    strike: tokens.USDC,\n    strikePrice: 1.859e-10,\n    minRatio: 1.4,\n    exchange: '0x5778f2824a114f6115dc74d432685d3336216017',\n    uniswapExchange: '0xA6923533A6362008e9b536271C2Bdc0FF1467D3c',\n    expiry: 1612915200,\n  },\n  {\n    addr: '0x8ed9f862363ffdfd3a07546e618214b6d59f03d4',\n    title: 'cUSDC Insurance',\n\n    // constants in contract\n    symbol: 'ocUSDC',\n    name: 'Opyn cUSDC Insurance',\n    decimals: 8,\n    oracle: '0x7054e08461e3eCb7718B63540adDB3c3A1746415',\n    collateral: tokens.OPYN_ETH,\n    underlying: tokens.cUSDC,\n    strike: tokens.USDC,\n    strikePrice: 2.08e-10,\n    minRatio: 1.4,\n    exchange: '0x5778f2824a114f6115dc74d432685d3336216017',\n    uniswapExchange: '0xE3A0a2431a093fed99037987eD0A88550e5E79AA',\n    expiry: 1612915200,\n  },\n  {\n    addr: '0x4ba8c6ce0e855c051e65dfc37883360efaf7c82b',\n    title: 'y.curve.fi Insurance',\n    // constants in contract\n    symbol: 'oCRV',\n    name: 'Opyn y.curve.fi Insurance',\n    decimals: 8,\n    oracle: '0x7054e08461e3eCb7718B63540adDB3c3A1746415',\n    collateral: tokens.OPYN_ETH,\n    underlying: tokens.CurveFi,\n    strike: tokens.USDC,\n    strikePrice: 9.2e-16,\n    minRatio: 1.6,\n    exchange: '0x5778f2824a114f6115dc74d432685d3336216017',\n    uniswapExchange: '0x21f5E9D4Ec20571402A5396084B1634314A68c97',\n    expiry: 1585440000,\n  },\n  {\n    addr: '0xddac4aed7c8f73032b388efe2c778fc194bc81ed',\n    title: 'cDai Insurance (Old)',\n    // constants in contract\n    symbol: 'ocDai',\n    name: 'Opyn cDai Insurance ',\n    decimals: 8,\n    oracle: '0x7054e08461e3eCb7718B63540adDB3c3A1746415',\n    collateral: tokens.OPYN_ETH,\n    underlying: tokens.cDAI,\n    strike: tokens.USDC,\n    strikePrice: 2e-10,\n    minRatio: 1.4,\n    exchange: '0x5778f2824a114f6115dc74d432685d3336216017',\n    uniswapExchange: '0x8a0976500EED661202810bAB030a057DF15c4CC9',\n    expiry: 1612915200,\n  },\n];\n","import { eth_calls } from './calls';\nimport { eth_puts } from './puts';\nimport { insurances } from './insurances';\n\nexport const eth_options = eth_calls.concat(eth_puts);\nexport const allOptions = insurances.concat(eth_calls).concat(eth_puts);\nexport { eth_calls, eth_puts, insurances };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { IdentityBadge } from '@aragon/ui';\n\nfunction AddressBlock({ label, address }) {\n  return (\n    <>\n      <div style={{ fontSize: 16, padding: 3 }}>{label}</div>\n      <div style={{ padding: 5 }}>\n        <IdentityBadge entity={address} shorten />\n      </div>\n    </>\n  );\n}\n\nAddressBlock.propTypes = {\n  label: PropTypes.string.isRequired,\n  address: PropTypes.string.isRequired,\n};\n\nexport default AddressBlock;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport BigNumber from 'bignumber.js';\n\nfunction BalanceBlock({ asset, balance }) {\n  let integer = '0';\n  let digits = '0';\n  if (new BigNumber(balance).gt(new BigNumber(0))) {\n    const str = new BigNumber(balance).toString();\n    const split = str.split('.');\n    integer = split[0];\n    digits = split.length > 1 ? str.split('.')[1] : '0';\n  }\n\n  return (\n    <>\n      <div style={{ fontSize: 14, padding: 3 }}>{asset}</div>\n      <div style={{ padding: 3 }}>\n        <span style={{ fontSize: 24 }}>{integer}</span>\n        .\n        <span style={{ fontSize: 18 }}>\n          {' '}\n          {digits}\n          {' '}\n        </span>\n      </div>\n    </>\n  );\n}\n\nBalanceBlock.propTypes = {\n  asset: PropTypes.string.isRequired,\n  balance: PropTypes.oneOfType([\n    PropTypes.instanceOf(BigNumber),\n    PropTypes.string,\n    PropTypes.number,\n  ]).isRequired,\n};\n\nexport default BalanceBlock;\n","import React from 'react';\nimport { Tag } from '@aragon/ui';\nimport Proptypes from 'prop-types';\n\nfunction RatioTag({ isSafe, ratio, useCollateral = true }) {\n  return !useCollateral ? (\n    <Tag color=\"#78827a\" background=\"#c0c2c0\">\n      Cool\n    </Tag>\n  ) : isSafe ? (\n    ratio < 1.6 ? (\n      <Tag background=\"#FFEBAD\" color=\"#FEC100\">\n        {' '}\n        Danger\n        {' '}\n      </Tag>\n    ) : (\n      <Tag mode=\"new\"> safe </Tag>\n    )\n  ) : (\n    <Tag color=\"#E34343\" background=\"#FFC6C6\">\n      Unsafe!\n    </Tag>\n  );\n}\n\nRatioTag.propTypes = {\n  isSafe: Proptypes.bool.isRequired,\n  ratio: Proptypes.number.isRequired,\n  useCollateral: Proptypes.bool,\n};\n\nRatioTag.defaultProps = {\n  useCollateral: true,\n};\n\nexport default RatioTag;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction SectionTitle({ title }) {\n  return <div style={{ padding: 10, fontSize: 20 }}>{title}</div>;\n}\n\nSectionTitle.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default SectionTitle;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  ButtonBase,\n} from '@aragon/ui';\n\nfunction MaxButton({ onClick }) {\n  return (\n    <div style={{ padding: 3 }}>\n      <ButtonBase onClick={onClick}>\n        <span style={{ opacity: 0.5 }}> Max </span>\n      </ButtonBase>\n    </div>\n  );\n}\n\nMaxButton.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default MaxButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction HelperText({ label, amt }) {\n  if (parseFloat(amt) > 0) {\n    return (\n      <div style={{ padding: 3, opacity: 0.5 }}>\n        <span style={{ fontSize: 13 }}>\n          {label}\n        </span>\n        <span style={{ fontSize: 13 }}>\n          {parseFloat(amt).toFixed(5)}\n        </span>\n      </div>\n    );\n  } return <div style={{ padding: 3, opacity: 0.5 }} />;\n}\n\nHelperText.propTypes = {\n  label: PropTypes.string.isRequired,\n  amt: PropTypes.string.isRequired,\n};\n\nexport default HelperText;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport BigNumber from 'bignumber.js';\n\nfunction PriceSection({\n  label, amt, symbol = '', forceDisplay = false,\n}) {\n  const amtBN = new BigNumber(amt);\n  if (amtBN.gt(new BigNumber(0)) || forceDisplay) {\n    return (\n      <div style={{ padding: 3, opacity: 0.5 }}>\n        <span style={{ fontSize: 13 }}>{label}</span>\n        <span style={{ fontSize: 13 }}>{amtBN.toNumber().toFixed(5)}</span>\n        <span style={{ fontSize: 13 }}>{symbol}</span>\n      </div>\n    );\n  }\n  return <div style={{ padding: 3, opacity: 0.5 }} />;\n}\n\nPriceSection.propTypes = {\n  label: PropTypes.string.isRequired,\n  symbol: PropTypes.string,\n  amt: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.instanceOf(BigNumber),\n  ]).isRequired,\n  forceDisplay: PropTypes.bool,\n};\n\nPriceSection.defaultProps = {\n  symbol: '',\n  forceDisplay: false,\n};\n\nexport default PriceSection;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Comment({ text }) {\n  return (\n    <div style={{ padding: 5, opacity: 0.5 }}>\n      {text}\n    </div>\n  );\n}\n\nComment.propTypes = {\n  text: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object,\n  ]).isRequired,\n};\n\nexport default Comment;\n","import React from 'react';\nimport { Button } from '@aragon/ui';\nimport { useHistory } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { openVault } from '../../utils/web3';\n\n\nfunction ManageVaultButton({ oToken, owner }) {\n  const history = useHistory();\n\n  const goToManagePage = () => {\n    history.push(`/manage/${oToken}/${owner}`);\n  };\n\n  return <Button onClick={() => goToManagePage(oToken, owner)} label=\"Manage\" />;\n}\n\nManageVaultButton.propTypes = {\n  oToken: PropTypes.string.isRequired,\n  owner: PropTypes.string.isRequired,\n};\n\n\nfunction OpenVaultButton({ oToken, user, goToMangePage = true }) {\n  const history = useHistory();\n\n  const openAndGoToVault = async () => {\n    await openVault(oToken);\n    if (goToMangePage) history.push(`/manage/${oToken}/${user}`);\n  };\n\n  return (\n    <Button\n      onClick={() => openAndGoToVault(oToken)}\n      label=\"Open Vault\"\n    />\n  );\n}\n\nOpenVaultButton.propTypes = {\n  oToken: PropTypes.string.isRequired,\n  user: PropTypes.string.isRequired,\n  goToMangePage: PropTypes.bool,\n};\n\nOpenVaultButton.defaultProps = {\n  goToMangePage: true,\n};\n\nexport { ManageVaultButton, OpenVaultButton };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox, useTheme } from '@aragon/ui';\nimport styled from 'styled-components';\n\nfunction MyCheckBox({ text, checked, onCheck }) {\n  const theme = useTheme();\n  return (\n    <CheckBoxWrapper theme={theme}>\n      <Checkbox\n        checked={checked}\n        onChange={onCheck}\n      />\n      <span style={{ paddingBottom: '5px' }}>\n        {text}\n      </span>\n      <br />\n    </CheckBoxWrapper>\n  );\n}\n\nMyCheckBox.propTypes = {\n  text: PropTypes.string.isRequired,\n  checked: PropTypes.bool.isRequired,\n  onCheck: PropTypes.func.isRequired,\n};\n\nexport default MyCheckBox;\n\nconst CheckBoxWrapper = styled.div`{\n  padding: 5px;\n  font-size: 14px;\n  color: ${(props) => props.theme.surfaceContentSecondary}\n}`;\n","import ReactGA from 'react-ga';\n\nReactGA.initialize(process.env.REACT_APP_GA_PROJECT_ID);\n\nexport default ReactGA;\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport {\n  Header, DataView, IdentityBadge, Button, Tabs,\n} from '@aragon/ui';\n\nimport { insurances, eth_options } from '../../constants/options';\nimport { Comment, CheckBox } from '../common';\nimport { getPreference, storePreference } from '../../utils/storage';\n\nimport tracker from '../../utils/tracker';\n\nfunction AllContracts() {\n  tracker.pageview('/options/');\n  const storedOptionTab = getPreference('optionTab', '0');\n  const storedShowExpired = getPreference('showExpired', '0');\n\n  const [tabSelected, setTabSelected] = useState(parseInt(storedOptionTab, 10));\n  const [showExpired, setShowExpired] = useState(storedShowExpired === '1'); // whether to show expired options\n\n  const history = useHistory();\n  const goToToken = (addr) => {\n    history.push(`/option/${addr}`);\n  };\n  return (\n    <>\n      <Header primary=\"All Contracts\" />\n      <div style={{ display: 'flex' }}>\n        <Comment text=\"Choose an option contract to proceed.\" />\n        <div style={{ marginLeft: 'auto' }}>\n          <CheckBox\n            text=\"Expired\"\n            onCheck={(checked) => {\n              storePreference('showExpired', checked ? '1' : '0');\n              setShowExpired(checked);\n            }}\n            checked={showExpired}\n          />\n        </div>\n      </div>\n      <Tabs\n        items={['DeFi Insurance', 'ETH Options']}\n        selected={tabSelected}\n        onChange={(choice) => {\n          setTabSelected(choice);\n          storePreference('optionTab', choice.toString());\n        }}\n      />\n\n      {tabSelected === 0 ? (\n        <DataView\n          fields={['Name', 'Contract', '']}\n          entries={insurances.filter((option) => showExpired || option.expiry * 1000 > Date.now())}\n          entriesPerPage={6}\n          renderEntry={({ addr, title }) => [\n            <>{title}</>,\n            <IdentityBadge entity={addr} shorten={false} />,\n            <Button onClick={() => goToToken(addr)}> View Vaults </Button>,\n          ]}\n        />\n      ) : (\n        <DataView\n          header=\"Options\"\n          fields={['Name', 'Contract', 'Expiry', '']}\n          entries={eth_options.filter((option) => showExpired || option.expiry * 1000 > Date.now())}\n          entriesPerPage={6}\n          renderEntry={({ addr, title, expiry }) => [\n            <>{title}</>,\n            <IdentityBadge entity={addr} shorten={false} />,\n            new Date(parseInt(expiry * 1000, 10)).toDateString(),\n            <Button onClick={() => goToToken(addr)}> View Vaults </Button>,\n          ]}\n        />\n      )}\n    </>\n  );\n}\n\nexport default AllContracts;\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport {\n  Header, DataView, IdentityBadge, Button,\n} from '@aragon/ui';\nimport { insurances, eth_options } from '../../constants/options';\n\nimport { Comment, CheckBox } from '../common';\nimport { storePreference, getPreference } from '../../utils/storage';\nimport tracker from '../../utils/tracker';\n\nfunction TradeLanding() {\n  const history = useHistory();\n  tracker.pageview('/trade/');\n  const goToTrade = (addr) => {\n    history.push(`/trade/${addr}`);\n  };\n\n  const [showExpired, setShowExpired] = useState(getPreference('showExpired', '0') === '1');\n\n  return (\n    <>\n      <Header primary=\"Trade\" />\n      <div style={{ display: 'flex' }}>\n        <Comment text=\"Buy or Sell DeFi Insurance\" />\n        <div style={{ marginLeft: 'auto' }}>\n          <CheckBox\n            text=\"Expired\"\n            checked={showExpired}\n            onCheck={(checked) => {\n              storePreference('showExpired', checked ? '1' : '0');\n              setShowExpired(checked);\n            }}\n          />\n        </div>\n      </div>\n      <DataView\n        fields={['Name', 'Contract', '']}\n        entries={insurances.filter((option) => showExpired || option.expiry * 1000 > Date.now())}\n        entriesPerPage={6}\n        renderEntry={({ addr, title }) => [\n          <>{title}</>,\n          <IdentityBadge entity={addr} shorten={false} />,\n          <Button onClick={() => goToTrade(addr)}> Start Trading </Button>,\n        ]}\n      />\n      <br />\n      <Comment text=\"Trade Options\" />\n      <DataView\n        fields={['Name', 'Contract', '']}\n        entries={eth_options.filter((option) => showExpired || option.expiry * 1000 > Date.now())}\n        entriesPerPage={6}\n        renderEntry={({ addr, title }) => [\n          <>{title}</>,\n          <IdentityBadge entity={addr} shorten={false} />,\n          <Button onClick={() => goToTrade(addr)}> Start Trading </Button>,\n        ]}\n      />\n    </>\n  );\n}\n\nexport default TradeLanding;\n","import Web3 from 'web3';\nimport BigNumber from 'bignumber.js';\n\nconst web3 = new Web3();\n\n/**\n * Convert 10.999 to 10999000\n * @param {number|string|BigNumber} rawAmt\n * @param {number} decimals\n * @returns {BigNumber}\n */\nexport function toBaseUnitBN(rawAmt, decimals) {\n  const raw = new BigNumber(rawAmt);\n  const base = new BigNumber(10);\n  const decimalsBN = new BigNumber(decimals);\n  return raw.times(base.pow(decimalsBN)).integerValue();\n}\n\n/**\n * Convert 10999000 to 10.999\n * @param {string | number | BigNumber} tokenAmount in base unit\n * @param {number} tokenDecimals\n * @return {BigNumber}\n */\nexport const toTokenUnitsBN = (tokenAmount, tokenDecimals) => {\n  const amt = new BigNumber(tokenAmount);\n  const digits = new BigNumber(10).pow(new BigNumber(tokenDecimals));\n  return amt.div(digits);\n};\n\nexport function formatDigits(num, percision) {\n  return parseFloat(num).toFixed(percision);\n}\n\nexport const fromWei = web3.utils.fromWei;\nexport const toWei = web3.utils.toWei;\n\nexport function timeSince(timeStamp) {\n  const now = new Date();\n  const secondsPast = (now.getTime() - timeStamp) / 1000;\n  if (secondsPast < 60) {\n    return `${parseInt(secondsPast, 10)}s ago`;\n  }\n  if (secondsPast < 3600) {\n    return `${parseInt(secondsPast / 60, 10)}m ago`;\n  }\n  if (secondsPast <= 86400) {\n    return `${parseInt(secondsPast / 3600, 10)}h ago`;\n  }\n  if (secondsPast > 86400) {\n    const ts = new Date(timeStamp);\n    const day = ts.getDate();\n    const month = ts\n      .toDateString()\n      .match(/ [a-zA-Z]*/)[0]\n      .replace(' ', '');\n    const year = ts.getFullYear() === now.getFullYear() ? '' : ` ${ts.getFullYear()}`;\n    return `${day} ${month}${year}`;\n  }\n\n  return timeStamp;\n}\n\nexport function compareVaultRatio(vaultA, vaultB) {\n  const rateA = vaultA.ratio;\n  const rateB = vaultB.ratio;\n\n  let comparison = 0;\n  if (parseFloat(rateA) > parseFloat(rateB)) {\n    comparison = 1;\n  } else if (parseFloat(rateA) < parseFloat(rateB)) {\n    comparison = -1;\n  }\n  return comparison;\n}\n\nexport function compareVaultIssued(vaultA, vaultB) {\n  const amountA = vaultA.oTokensIssued;\n  const amountB = vaultB.oTokensIssued;\n\n  let comparison = 0;\n  if (parseInt(amountA, 10) > parseInt(amountB, 10)) {\n    comparison = -1;\n  } else if (parseInt(amountA, 10) < parseInt(amountB, 10)) {\n    comparison = 1;\n  }\n  return comparison;\n}\n\nexport const isAddress = web3.utils.isAddress;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  TextInput, DataView, Button, LinkBase, EthIdenticon, useToast,\n} from '@aragon/ui';\nimport { getPreference, checkAddressAndAddToStorage } from '../../utils/storage';\n\nimport { Comment } from '../common';\nimport { isAddress } from '../../utils/number';\nimport { resolveENS } from '../../utils/infura';\n\nfunction PleaseLogin({ setWatchAddress }) {\n  const toast = useToast();\n  const [InAddress, setAddress] = useState('');\n  const watch_addrs = getPreference('watch_addresses', '[]');\n  const usedAddresses = JSON.parse(watch_addrs);\n\n  return (\n    <>\n      {/* <Header></Header> */}\n      <Comment text=\"Please connect wallet to proceed or enter an address to use Watch Mode.\" />\n      <br />\n      <br />\n      <p style={{ fontSize: 20 }}> Watch Mode </p>\n      <Comment text=\"You won't be able to interact with any smart contract under Watch Mode.\" />\n      <div style={{ display: 'flex' }}>\n        <div style={{ width: '50%' }}>\n          <TextInput\n            placeholder=\"Ethereum address or ENS\"\n            value={InAddress}\n            onChange={(e) => { setAddress(e.target.value.toLowerCase()); }}\n            wide\n          />\n\n          {usedAddresses.length > 0 ? (\n            <div style={{ paddingTop: '3%' }}>\n              <DataView\n                entries={usedAddresses.reverse()}\n                fields={['used']}\n                entriesPerPage={5}\n                renderEntry={(address) => [\n                  <LinkBase onClick={() => {\n                    setWatchAddress(address);\n                    checkAddressAndAddToStorage(address);\n                  }}\n                  >\n                    {/* <IdentityBadge entity={address} /> */}\n                    <EthIdenticon\n                      address={address}\n                      scale={1.3}\n                      radius={5}\n                    />\n                    <span style={{ paddingLeft: 8, fontSize: 15, fontFamily: 'aragon-ui-monospace' }}>{address}</span>\n                  </LinkBase>,\n                ]}\n              />\n            </div>\n          ) : <></>}\n        </div>\n        <div style={{ width: '8%', paddingLeft: '1%', paddingRight: '1%' }}>\n          <Button\n            label=\"Watch Address\"\n            onClick={async () => {\n              if (isAddress(InAddress)) {\n                setWatchAddress(InAddress);\n                checkAddressAndAddToStorage(InAddress);\n              } else {\n                try {\n                  const address = await resolveENS(InAddress);\n                  setWatchAddress(address);\n                  checkAddressAndAddToStorage(address);\n                } catch (error) {\n                  toast('Invalid Address');\n                }\n              }\n            }}\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n\nPleaseLogin.propTypes = {\n  // watchAddres: PropTypes.string.isRequired,\n  setWatchAddress: PropTypes.func.isRequired,\n};\n\nexport default PleaseLogin;\n","// const prefix = 'https://cors-anywhere-anton.herokuapp.com/';\nconst opynGraphEndpoint = 'https://api.thegraph.com/subgraphs/name/aparnakr/opyn';\n\n/**\n * @return {Promise<Array<{colalteral: string, oTokensIssued: string, owner: string}>>}\n */\nexport async function getAllVaultsForOption(optionAddress) {\n  const query = `\n  {\n    vaults(where: {\n      optionsContract: \"${optionAddress}\"\n    }) {\n      owner\n      oTokensIssued,\n      collateral,\n    }\n  }`;\n  const response = await postQuery(query);\n  const vaults = response.data.vaults;\n  return vaults;\n}\n\nexport async function getAllVaultsForUser(owner) {\n  const query = `{\n    vaults (where: {owner: \"${owner}\"}) {\n      optionsContract {\n        address\n      }\n      oTokensIssued,\n      collateral,\n      underlying\n    }\n  }`;\n  const response = await postQuery(query);\n  const actions = response.data.vaults;\n  return actions;\n}\n\n/**\n * Return target vault or null\n * @param {string} owner\n * @param {string} option\n * @return {Promise<{underlying:string, colalteral:string, oTokensIssued:string}>}\n */\nexport async function getVault(owner, option) {\n  const query = `{\n    vault(\n     id: \"${option.toLowerCase()}-${owner.toLowerCase()}\"\n    ) {\n      underlying\n      collateral\n      oTokensIssued\n    }\n  }`;\n  const response = await postQuery(query);\n  return response.data.vault;\n}\n\nexport async function getLiquidationHistory(owner) {\n  const query = liquidationActionsQuery(owner);\n  const response = await postQuery(query);\n  return response.data.liquidateActions;\n}\n\nconst liquidationActionsQuery = (owner) => `{\n  liquidateActions(where: {\n    vault_contains: \"${owner}\"\n  }) {\n    vault {\n      owner,\n      optionsContract {\n        address\n      }\n    },\n    liquidator,\n    collateralToPay,\n    timestamp\n    transactionHash\n  }\n}\n\n`;\n\n/**\n * Get all exercise history for one user\n * @param {string} owner vault owner\n * @param {string} option contract address\n * @return {Promise<{\n * amtCollateralToPay: string,\n * exerciser:string,\n * oTokensToExercise:string,\n * timestamp:string,\n * transactionHash: string}[]>}\n */\nexport async function getExerciseHistory(owner, option) {\n  const query = `{\n    exerciseActions (where: {\n      vault_contains: \"${owner}\"\n      optionsContract_contains: \"${option}\"\n    }) {\n      exerciser\n      oTokensToExercise\n      amtCollateralToPay\n      transactionHash\n      timestamp\n    }\n  }`;\n\n  const response = await postQuery(query);\n  return response.data.exerciseActions;\n}\n\n/**\n * get RemoveUnderlying Event history\n * @param {string} owner\n * @param {string} option\n * @return {Promise<{\n * amount:string, timestamp:string, transactionHash:string\n * }[]>}\n */\nexport async function getRemoveUnderlyingHistory(owner, option) {\n  const query = `{\n    removeUnderlyingActions(\n      where: {\n        vault_contains: \"${option}\"\n        owner: \"${owner}\"   \n      }\n    ) {\n      timestamp\n      transactionHash\n      amount\n    }\n  }`;\n  const response = await postQuery(query);\n  return response.data.removeUnderlyingActions;\n}\n\n\nconst postQuery = async (query) => {\n  const options = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ query }),\n  };\n  const res = await fetch(opynGraphEndpoint, options);\n  return res.json();\n};\n","import BigNumber from 'bignumber.js';\nimport { getPrice } from './infura';\nimport { toBaseUnitBN } from './number';\n\n/**\n * Get strike value in collateral for ratio calculation.\n * @param {string} collateral address\n * @param {string} strike address\n * @param {string} oracle address\n * @param {number} collateralDecimals\n * @return {Promise<BigNumber>}\n */\nexport const calculateStrikeValueInCollateral = async (\n  collateral,\n  strike,\n  oracle,\n  collateralDecimals,\n) => {\n  const ETH_Address = '0x0000000000000000000000000000000000000000';\n  let strikeValueInCollateral;\n  if (collateral === ETH_Address) {\n    const strikeValueInWei = await getPrice(oracle, strike);\n    strikeValueInCollateral = new BigNumber(strikeValueInWei);\n  } else if (collateral === strike) {\n    // No collateral, like ETH option\n    strikeValueInCollateral = new BigNumber(10).pow(new BigNumber(collateralDecimals));\n  } else {\n    const strikeValueInWei = await getPrice(oracle, strike);\n    const collateralValueInWei = await getPrice(oracle, collateral);\n    strikeValueInCollateral = toBaseUnitBN(\n      parseInt(strikeValueInWei, 10) / parseInt(collateralValueInWei, 10),\n      collateralDecimals,\n    );\n  }\n  return strikeValueInCollateral;\n};\n\n/**\n *\n * @param {string|number|BigNumber} collateral number of collateral in base unit\n * @param {string|number|BigNumber} tokenIssued number of token in base unit\n * @param {string|number|BigNumber} strikePrice\n * @param {BigNumber} strikeValueInCollateral\n * @return {number}\n */\nexport const calculateRatio = (collateral, tokenIssued, strikePrice, strikeValueInCollateral) => {\n  if (tokenIssued === '0') return Infinity;\n  const colalteralBN = new BigNumber(collateral);\n  const tokenIssuedBN = new BigNumber(tokenIssued);\n  const strikePriceBN = new BigNumber(strikePrice);\n  // const strikeValueInCollateralBN = new BigNumber(strikeValueInCollateral.toString())\n  const result = colalteralBN\n    .div(tokenIssuedBN)\n    .div(strikePriceBN)\n    .div(strikeValueInCollateral);\n  return result.toNumber();\n};\n","import React, { useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport BigNumber from 'bignumber.js';\nimport {\n  Header, DataView, IdentityBadge,\n} from '@aragon/ui';\nimport NoWalletView from './NoWallet';\n\nimport { allOptions } from '../../constants/options';\nimport {\n  SectionTitle, ManageVaultButton, OpenVaultButton, Comment, CheckBox,\n} from '../common';\nimport {\n  formatDigits, compareVaultRatio, toTokenUnitsBN,\n} from '../../utils/number';\nimport { getAllVaultsForUser } from '../../utils/graph';\nimport { getPreference, storePreference } from '../../utils/storage';\nimport { calculateRatio, calculateStrikeValueInCollateral } from '../../utils/calculation';\nimport tracker from '../../utils/tracker';\n\nconst Promise = require('bluebird');\n\nfunction MyVaults({ user }) {\n  tracker.pageview('/myvaults');\n  const [opendVaults, setOpenedVaults] = useState([]);\n  const [tokensToOpen, setTokensToOpen] = useState([]);\n\n  const [isLoading, setIsLoading] = useState(true);\n  // enable not logged in user to use this feature\n  const [watchAddress, setWatchAddress] = useState('');\n  const isWatchMode = user === '' && watchAddress !== '';\n  const hasAddressConnected = user !== '' || watchAddress !== '';\n\n  // checkbox\n  const [showExpired, setShowExpired] = useState(getPreference('showExpired', '0') === '1');\n  const [showEmpty, setShowEmpty] = useState(getPreference('showEmpty', '1') === '1');\n\n  const displayVaults = opendVaults\n    .filter((vault) => showExpired || vault.expiry * 1000 > Date.now())\n    .filter((vault) => showEmpty || new BigNumber(vault.collateral).gt(new BigNumber(0)));\n\n  // Only request all vaults once\n  useMemo(async () => {\n    if (!hasAddressConnected) return;\n    const userVaults = await getAllVaultsForUser(isWatchMode ? watchAddress : user);\n    const openedVaults = [];\n    const notOpenedTokens = [];\n    await Promise.map(allOptions, async (option) => {\n      const entry = userVaults.find((vault) => vault.optionsContract.address === option.addr);\n      const isOpened = entry !== undefined;\n      if (isOpened) {\n        const strikeValueInCollateral = await calculateStrikeValueInCollateral(\n          option.collateral.addr,\n          option.strike.addr,\n          option.oracle,\n          option.collateral.decimals,\n        );\n        const ratio = calculateRatio(\n          entry.collateral,\n          entry.oTokensIssued,\n          option.strikePrice,\n          strikeValueInCollateral,\n        );\n        openedVaults.push({\n          oToken: option.addr,\n          oTokenName: option.title,\n          collateral: entry.collateral,\n          collateralDecimals: option.collateral.decimals,\n          expiry: option.expiry,\n          ratio,\n        });\n      } else if (option.expiry > (Date.now() / 1000)) {\n        // only put non-expired token to \"can open\" list\n        notOpenedTokens.push({\n          oToken: option.addr,\n          oTokenName: option.title,\n        });\n      }\n    });\n    setIsLoading(false);\n    setOpenedVaults(openedVaults.sort(compareVaultRatio));\n    setTokensToOpen(notOpenedTokens);\n  }, [user, watchAddress, hasAddressConnected, isWatchMode]);\n\n  return (\n    <>\n      <Header primary=\"My Vaults\" />\n      {hasAddressConnected ? (\n        <>\n          {opendVaults.length > 0 ? (\n            <div style={{ paddingBottom: '3%' }}>\n\n              <div style={{ display: 'flex' }}>\n                <SectionTitle title=\"Existing Vaults\" />\n                <div style={{ marginLeft: 'auto' }}>\n                  <div style={{ display: 'flex' }}>\n                    <CheckBox\n                      text=\"Expired\"\n                      checked={showExpired}\n                      onCheck={(checked) => {\n                        storePreference('showExpired', checked ? '1' : '0');\n                        setShowExpired(checked);\n                      }}\n                    />\n                    <CheckBox\n                      text=\"Empty\"\n                      checked={showEmpty}\n                      onCheck={(checked) => {\n                        storePreference('showEmpty', checked ? '1' : '0');\n                        setShowEmpty(checked);\n                      }}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <DataView\n                fields={['Token', 'contract', 'collateral', 'Ratio', '']}\n                entries={displayVaults}\n                entriesPerPage={6}\n                renderEntry={({\n                  oToken, oTokenName, collateral, collateralDecimals, ratio,\n                }) => [\n                  oTokenName,\n                  <IdentityBadge entity={oToken} />,\n                  formatDigits(toTokenUnitsBN(collateral, collateralDecimals).toNumber(), 5),\n                  formatDigits(ratio, 4),\n                  <ManageVaultButton oToken={oToken} owner={isWatchMode ? watchAddress : user} />,\n                ]}\n              />\n            </div>\n          ) : isLoading ? (\n            <Comment text=\"Loading\" />\n          ) : (\n            <Comment text=\"No Opened Vaults\" />\n          )}\n          {tokensToOpen.length > 0 && !isWatchMode ? (\n            <div>\n              <SectionTitle title=\"Open new vaults\" />\n              <DataView\n                fields={['Token', 'contract', 'manage']}\n                entries={tokensToOpen}\n                renderEntry={({ oToken, oTokenName }) => [\n                  oTokenName,\n                  <IdentityBadge entity={oToken} shorten={false} />,\n                  <OpenVaultButton oToken={oToken} user={user} />,\n                ]}\n              />\n            </div>\n          ) : (\n            <></>\n          )}\n        </>\n      ) : (\n        // Not connected to wallet\n        <NoWalletView\n          watchAddress={watchAddress}\n          setWatchAddress={setWatchAddress}\n        />\n      )}\n    </>\n  );\n}\n\nMyVaults.propTypes = {\n  user: PropTypes.string.isRequired,\n};\n\nexport default MyVaults;\n","import PropTypes from 'prop-types';\n\nexport const vault = PropTypes.shape({\n  owner: PropTypes.string,\n  oTokensIssued: PropTypes.string,\n  collateral: PropTypes.string,\n});\n\n// export const detailVault = PropTypes.shape({\n//   oTokensIssued: PropTypes.string,\n//   collateral: PropTypes.string,\n// });\n\nexport const token = PropTypes.shape({\n  addr: PropTypes.string.isRequired,\n  decimals: PropTypes.number.isRequired,\n  symbol: PropTypes.string.isRequired,\n});\n\nexport const option = PropTypes.shape({\n  addr: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  symbol: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  decimals: PropTypes.number.isRequired,\n  oracle: PropTypes.string.isRequired,\n  collateral: token.isRequired,\n  underlying: token.isRequired,\n  strike: token.isRequired,\n  strikePrice: PropTypes.number.isRequired,\n  minRatio: PropTypes.number.isRequired,\n  exchange: PropTypes.string.isRequired,\n  uniswapExchange: PropTypes.string.isRequired,\n  expiry: PropTypes.number.isRequired,\n});\n","import React, { useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  Header,\n  Button,\n  Modal,\n  Box,\n  Split,\n  TextInput,\n  IdentityBadge,\n  DataView,\n} from '@aragon/ui';\nimport BigNumber from 'bignumber.js';\n\nimport * as myType from '../types';\nimport { exercise } from '../../utils/web3';\nimport { PriceSection } from '../common';\nimport { getUnderlyingRequiredToExercise, getBalance, getTokenBalance } from '../../utils/infura';\nimport {\n  toTokenUnitsBN, toBaseUnitBN, formatDigits, compareVaultIssued,\n} from '../../utils/number';\n\nimport { ETH_ADDRESS } from '../../constants/contracts';\nimport { allOptions } from '../../constants/options';\n\nfunction ExerciseModal({\n  user,\n  token,\n  vaults,\n}) {\n  const option = allOptions.find((o) => o.addr === token);\n  const underlyingIsETH = option.underlying.addr === ETH_ADDRESS;\n  const [userUnderlyingBalance, setUserUnderlyingBalance] = useState(new BigNumber(0));\n  const [userOTokenBalance, setUserOTokenBalance] = useState(new BigNumber(0));\n\n  const [opened, setOpened] = useState(false);\n\n  const [exerciseAmount, setExerciseAmount] = useState(new BigNumber(0));\n  const [underlyringRequired, setUnderlyringRequired] = useState(new BigNumber(0));\n\n  const nonEmptyVaults = vaults\n    .filter((vault) => parseInt(vault.collateral, 10) > 0)\n    .sort(compareVaultIssued);\n\n  const [selectedIndexes, setSelectedIndexes] = useState([]);\n  const [selectedHasEnoughCollateral, setHasEnoughCollateral] = useState(false);\n\n  const open = () => setOpened(true);\n  const close = () => setOpened(false);\n\n  // Update user balance\n  useMemo(async () => {\n    if (!user) return;\n    if (!opened) return;\n    let userUnderlying;\n    if (underlyingIsETH) {\n      userUnderlying = new BigNumber(await getBalance(user));\n    } else {\n      userUnderlying = toTokenUnitsBN(\n        await getTokenBalance(option.underlying.addr, user),\n        option.underlying.decimals,\n      );\n    }\n    const userOTkns = toTokenUnitsBN(await getTokenBalance(option.addr, user), option.decimals);\n\n    setUserUnderlyingBalance(userUnderlying);\n    setUserOTokenBalance(userOTkns);\n  }, [option, underlyingIsETH, user, opened]);\n\n  const onSelectEntries = (entries, indexes) => {\n    setSelectedIndexes(indexes);\n    checkHasEnoughToken(entries);\n  };\n\n  /**\n   * Set selectedHasEnoughCollateral according to selected entries\n   * @param {{oTokenIssued: string}[]} entries\n   */\n  const checkHasEnoughToken = (entries) => {\n    const sumIssued = entries.reduce(\n      (accumulator, current) => accumulator.plus(new BigNumber(current.oTokensIssued)), new BigNumber(0),\n    );\n    if (sumIssued.gt(new BigNumber(0)) && sumIssued.gte(toBaseUnitBN(exerciseAmount, option.decimals))) {\n      setHasEnoughCollateral(true);\n    } else {\n      setHasEnoughCollateral(false);\n    }\n  };\n\n  const onChangeExerciseAmt = async (amount) => {\n    if (!amount) {\n      setExerciseAmount(new BigNumber(0));\n      setUnderlyringRequired(new BigNumber(0));\n      return;\n    }\n    const exeAmtBN = new BigNumber(amount);\n    setExerciseAmount(exeAmtBN);\n    const underlyingRawAmt = await getUnderlyingRequiredToExercise(\n      option.addr,\n      toBaseUnitBN(exeAmtBN, option.decimals).toString(),\n    );\n    const underlyingRequired = toTokenUnitsBN(underlyingRawAmt, option.underlying.decimals);\n    setUnderlyringRequired(underlyingRequired);\n\n    // check current selection has enought tokens\n    const entries = selectedIndexes.map((index) => nonEmptyVaults[index]);\n    checkHasEnoughToken(entries);\n  };\n\n  return (\n    <>\n      {/* Button */}\n      <Button onClick={open} label=\"Claim\" />\n\n      {/* Modal */}\n      <Modal width={800} padding={50} visible={opened} onClose={close}>\n        <Header\n          primary=\"Exercise Option\"\n          secondary={(\n            <div style={{ display: 'flex' }}>\n              <PriceSection\n                label=\"Balance:\"\n                amt={userOTokenBalance.toNumber()}\n                symbol={option.symbol}\n                forceDisplay\n              />\n              <PriceSection label=\" +\" amt={userUnderlyingBalance.toNumber()} symbol={option.underlying.symbol} />\n            </div>\n          )}\n        />\n        <Box heading=\"Amount to Exercise\">\n          <Split\n            primary={(\n              <>\n                <TextInput\n                  type=\"number\"\n                  wide\n                  adornment={option.symbol}\n                  adornmentPosition=\"end\"\n                  value={exerciseAmount.toNumber()}\n                  onChange={(event) => onChangeExerciseAmt(event.target.value)}\n                />\n              </>\n            )}\n            secondary={(\n              <div style={{ paddingTop: 5 }}>\n                <PriceSection\n                  label=\"+ Underlyring\"\n                  amt={underlyringRequired.toNumber()}\n                  symbol={option.underlying.symbol}\n                />\n              </div>\n            )}\n          />\n        </Box>\n        <DataView\n          mode=\"table\"\n          renderSelectionCount={(count) => `${count} vaults selected`}\n          fields={['Owner', 'Issued', 'collateral']}\n          entries={nonEmptyVaults}\n          entriesPerPage={5}\n          selection={selectedIndexes}\n          onSelectEntries={onSelectEntries}\n          renderEntry={({ owner, collateral, oTokensIssued }) => [\n            <IdentityBadge entity={owner} />,\n            formatDigits(toTokenUnitsBN(oTokensIssued, option.decimals).toNumber(), 5),\n            formatDigits(toTokenUnitsBN(collateral, option.collateral.decimals).toNumber(), 5),\n          ]}\n        />\n        <br />\n        <Button\n          label=\"Exercise\"\n          disabled={!selectedHasEnoughCollateral}\n          wide\n          onClick={async () => {\n            const vaultowners = selectedIndexes.map((index) => vaults[index].owner);\n            exercise(\n              option.addr,\n              option.underlying.addr,\n              toBaseUnitBN(exerciseAmount, option.decimals).toString(),\n              vaultowners,\n            );\n          }}\n        />\n      </Modal>\n    </>\n  );\n}\n\nExerciseModal.propTypes = {\n  user: PropTypes.string.isRequired,\n  token: PropTypes.string.isRequired,\n  vaults: PropTypes.arrayOf(myType.vault).isRequired,\n};\n\nexport default ExerciseModal;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Header,\n  Button,\n  Modal,\n  Box,\n  Split,\n  TextInput,\n  IdentityBadge,\n  IconEthereum,\n  IconConnect,\n  DataView,\n  useToast,\n  Tag,\n} from '@aragon/ui';\n\nimport * as MyPTypes from '../types';\nimport { RatioTag, Comment } from '../common';\n\nimport {\n  liquidate,\n  addERC20Collateral,\n  addETHCollateral,\n  kollateralLiquidate,\n} from '../../utils/web3';\nimport { getMaxLiquidatable } from '../../utils/infura';\nimport { toTokenUnitsBN, toBaseUnitBN, formatDigits } from '../../utils/number';\nimport { KETH, DAI, USDC } from '../../constants/contracts';\n\n/**\n *\n * @param {{\n * option:{\n * decimals:number,\n * exchange:string, collateral:{ addr:string, decimals: number, symbol:string}, symbol:string }\n * oTokensIssued: string,\n * collateralAmount: string,\n * exchange:string}} param0\n */\nfunction VaultModal({\n  option,\n  useCollateral,\n  owner,\n  collateral, // amount of collateral of this vault\n  oTokensIssued,\n  isSafe,\n  ratio,\n  collateralIsETH,\n}) {\n  const toast = useToast();\n  const [opened, setOpened] = useState(false);\n  const [addValue, setAddValue] = useState(0);\n  const [liquidateAmt, setLiquidateAmt] = useState(0);\n  const open = () => setOpened(true);\n  const close = () => setOpened(false);\n\n  useEffect(() => {\n    let isCancelled = false;\n    async function getData() {\n      if (!opened) return;\n      if (!useCollateral) return;\n      const maxLiquidatable = await getMaxLiquidatable(option.addr, owner);\n      if (!isCancelled) {\n        setLiquidateAmt(toTokenUnitsBN(maxLiquidatable, option.decimals).toNumber());\n      }\n    }\n    getData();\n\n    return () => {\n      isCancelled = true;\n    };\n  }, [option, opened, owner, useCollateral]);\n\n  return (\n    <>\n      <Button onClick={open} label=\"More\" />\n      <Modal width={900} padding={50} visible={opened} onClose={close}>\n        <Header primary=\"Access Position\" />\n\n        <DataView\n          fields={['Owner', 'Collateral', 'Issued', 'ratio', 'Status']}\n          entries={[{\n            collateral, isSafe, oTokensIssued, ratio, owner,\n          }]}\n          entriesPerPage={1}\n          renderEntry={(vault) => [\n            <IdentityBadge entity={vault.owner} shorten />,\n            formatDigits(toTokenUnitsBN(vault.collateral, option.collateral.decimals), 5),\n            formatDigits(toTokenUnitsBN(vault.oTokensIssued, option.decimals), 5),\n            formatDigits(vault.ratio, 4),\n            RatioTag({ isSafe: vault.isSafe, ratio, useCollateral }),\n          ]}\n        />\n\n        <br />\n        <Box heading=\"Add Collateral\">\n          <Split\n            primary={(\n              <TextInput\n                type=\"number\"\n                wide\n                adornment={<IconEthereum />}\n                adornmentPosition=\"end\"\n                value={addValue}\n                onChange={(event) => {\n                  setAddValue(event.target.value);\n                }}\n              />\n            )}\n            secondary={(\n              <Button\n                label=\"Add Collateral\"\n                wide\n                onClick={() => {\n                  if (collateralIsETH) {\n                    addETHCollateral(option.addr, owner, addValue);\n                  } else {\n                    addERC20Collateral(\n                      option.collateral.addr,\n                      option.addr,\n                      owner,\n                      toBaseUnitBN(addValue, option.collateral.decimals).toString(),\n                    );\n                  }\n                }}\n              />\n            )}\n          />\n        </Box>\n\n        {useCollateral ? (\n          <Box heading=\"Liquidate\">\n            <Comment text={`Liquidate with your ${option.symbol}`} />\n            <Split\n              primary={(\n                <>\n                  <TextInput\n                    wide\n                    type=\"number\"\n                    value={liquidateAmt}\n                    onChange={(event) => {\n                      setLiquidateAmt(event.target.value);\n                    }}\n                  />\n                </>\n              )}\n              secondary={(\n                <>\n                  <Button\n                    wide\n                    disabled={isSafe}\n                    label=\"Liquidate\"\n                    onClick={() => {\n                      liquidate(option.addr, owner, toBaseUnitBN(liquidateAmt, option.decimals)).catch(\n                        (error) => {\n                          toast(error.toString());\n                        },\n                      );\n                    }}\n                  />\n                </>\n              )}\n            />\n            <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n              <Comment text=\" Or \" />\n            </div>\n            <Comment text={(\n              <>\n                <Tag> beta </Tag>\n                Liquidate with Kollateral Flashloan\n              </>\n              )}\n            />\n\n            <div style={{ display: 'flex' }}>\n              <Button\n                icon={<IconConnect />}\n                label=\"DAI\"\n                disabled={isSafe}\n                onClick={() => {\n                  kollateralLiquidate(option.addr, option.exchange, owner, DAI).catch((error) => {\n                    toast(error.toString());\n                  });\n                }}\n                wide\n                selected\n              />\n              <Button\n                icon={<IconConnect />}\n                label=\"USDC\"\n                disabled={isSafe}\n                onClick={() => {\n                  kollateralLiquidate(option.addr, option.exchange, owner, USDC).catch((error) => {\n                    toast(error.toString());\n                  });\n                }}\n                wide\n              />\n              <Button\n                icon={<IconConnect />}\n                label=\"ETH\"\n                disabled={isSafe}\n                onClick={() => {\n                  kollateralLiquidate(option.addr, option.exchange, owner, KETH).catch((error) => {\n                    toast(error.toString());\n                  });\n                }}\n                wide\n              />\n            </div>\n          </Box>\n        ) : (\n          <></>\n        )}\n      </Modal>\n    </>\n  );\n}\n\nVaultModal.propTypes = {\n  option: MyPTypes.option.isRequired,\n  useCollateral: PropTypes.bool.isRequired,\n  owner: PropTypes.string.isRequired,\n  collateral: PropTypes.string.isRequired,\n  isSafe: PropTypes.bool.isRequired,\n  oTokensIssued: PropTypes.string.isRequired,\n  ratio: PropTypes.number.isRequired,\n  collateralIsETH: PropTypes.bool.isRequired,\n};\n\nexport default VaultModal;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { DataView, IdentityBadge } from '@aragon/ui';\nimport VaultModal from './VaultModal';\nimport { SectionTitle, RatioTag } from '../common';\nimport * as MyPTypes from '../types';\nimport {\n  formatDigits, compareVaultRatio, compareVaultIssued, toTokenUnitsBN,\n} from '../../utils/number';\nimport { calculateRatio, calculateStrikeValueInCollateral } from '../../utils/calculation';\nimport { allOptions } from '../../constants/options';\n\nfunction VaultOwnerList({\n  user, token, vaults, collateralIsETH,\n}) {\n  const option = allOptions.find((o) => o.addr === token);\n  const vaultUsesCollateral = option.collateral.addr !== option.strike.addr;\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [vaultsWithDetail, setVaultDetail] = useState([]);\n\n  const [page, setPage] = useState(0);\n\n  useEffect(() => {\n    let isCancelled = false;\n    const updateInfo = async () => {\n      if (vaults.length === 0) return;\n      const {\n        strike, minRatio, strikePrice, oracle, collateral,\n      } = option;\n\n      const strikeValueInCollateral = await calculateStrikeValueInCollateral(\n        collateral.addr,\n        strike.addr,\n        oracle,\n        collateral.decimals,\n      );\n      const vaultDetail = vaults\n        .map((vault) => {\n          if (vault.oTokensIssued === '0') {\n            return {\n              owner: vault.owner,\n              oTokensIssued: vault.oTokensIssued,\n              collateral: vault.collateral,\n              ratio: Infinity,\n              useCollateral: vaultUsesCollateral,\n              isSafe: true,\n            };\n          }\n          const ratio = calculateRatio(\n            vault.collateral,\n            vault.oTokensIssued,\n            strikePrice,\n            strikeValueInCollateral,\n          );\n          return {\n            owner: vault.owner,\n            oTokensIssued: vault.oTokensIssued,\n            collateral: vault.collateral,\n            ratio,\n            useCollateral: vaultUsesCollateral,\n            isSafe: ratio > minRatio,\n          };\n        })\n        .sort(vaultUsesCollateral ? compareVaultRatio : compareVaultIssued);\n\n      if (!isCancelled) {\n        setVaultDetail(vaultDetail);\n        setIsLoading(false);\n      }\n    };\n\n    updateInfo();\n    const id = setInterval(updateInfo, 60000);\n\n    return () => {\n      isCancelled = true;\n      clearInterval(id);\n    };\n  }, [collateralIsETH, option, user, vaultUsesCollateral, vaults]);\n\n  return (\n    <>\n      <SectionTitle title=\"All Vaults\" />\n      <DataView\n        page={page}\n        onPageChange={setPage}\n        status={isLoading ? 'loading' : 'default'}\n        fields={['Owner', 'collateral', 'Issued', 'RATIO', 'Status', '']}\n        entries={vaultsWithDetail}\n        entriesPerPage={5}\n        renderEntry={({\n          owner, collateral, oTokensIssued, ratio, isSafe, useCollateral,\n        }) => [\n          <IdentityBadge entity={owner} shorten />,\n          formatDigits(\n            toTokenUnitsBN(collateral, option.collateral.decimals).toNumber(),\n            6,\n          ),\n          formatDigits(\n            toTokenUnitsBN(oTokensIssued, option.decimals).toNumber(),\n            6,\n          ),\n          formatDigits(ratio, 5),\n          RatioTag({ isSafe, ratio, useCollateral }),\n          <VaultModal\n            option={option}\n            owner={owner}\n            collateral={collateral}\n            isSafe={isSafe}\n            useCollateral={useCollateral}\n            collateralIsETH={collateralIsETH}\n            oTokensIssued={oTokensIssued}\n            ratio={ratio}\n          />,\n        ]}\n      />\n    </>\n  );\n}\n\nVaultOwnerList.propTypes = {\n  user: PropTypes.string.isRequired,\n  vaults: PropTypes.arrayOf(MyPTypes.vault).isRequired,\n  token: PropTypes.string.isRequired,\n  collateralIsETH: PropTypes.bool.isRequired,\n};\n\nexport default VaultOwnerList;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Box, Split, IdentityBadge } from '@aragon/ui';\n\nimport BigNumber from 'bignumber.js';\n\nimport { getTotalSupply, getBalance, getTokenBalance } from '../../utils/infura';\nimport { toTokenUnitsBN } from '../../utils/number';\nimport { allOptions } from '../../constants/options';\n\nfunction OptionOverview({\n  token,\n  collateralIsETH,\n}) {\n  const option = allOptions.find((o) => o.addr === token);\n  const [totalCollateral, setTotalCollateral] = useState(new BigNumber(0));\n  const [totalSupply, setTotalSupply] = useState(new BigNumber(0));\n\n  useEffect(() => {\n    let isCancelled = false;\n    async function init() {\n      let totalCollt;\n      if (collateralIsETH) {\n        totalCollt = new BigNumber(await getBalance(option.addr));\n      } else {\n        const rawCollateralBalance = await getTokenBalance(option.collateral.addr, option.addr);\n        totalCollt = toTokenUnitsBN(rawCollateralBalance, option.collateral.decimals);\n      }\n      const supply = await getTotalSupply(option.addr);\n      if (!isCancelled) {\n        setTotalCollateral(totalCollt);\n        setTotalSupply(toTokenUnitsBN(supply, option.decimals));\n      }\n    }\n    init();\n\n    return () => {\n      isCancelled = true;\n    };\n  }, [collateralIsETH, option]);\n\n  return (\n    <>\n      <Split\n        primary={(\n          <Split\n            primary={(\n              <Box heading=\"contract\" padding={15}>\n                <IdentityBadge entity={option.addr} shorten={false} />\n              </Box>\n            )}\n            secondary={(\n              <Box heading=\"Total Collateral\" padding={15}>\n                {totalCollateral.toFormat(4)}\n                {' '}\n                {option.collateral.symbol}\n              </Box>\n            )}\n          />\n        )}\n        secondary={(\n          <Box heading=\"total supply\" padding={15}>\n            {totalSupply.toFormat(4)}\n            {' '}\n            {option.symbol}\n          </Box>\n        )}\n      />\n    </>\n  );\n}\n\nOptionOverview.propTypes = {\n  token: PropTypes.string.isRequired,\n  collateralIsETH: PropTypes.bool.isRequired,\n};\n\nexport default OptionOverview;\n","import React, { useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport { Header } from '@aragon/ui';\n\nimport ExerciseModal from './ExerciseModal';\nimport VaultsList from './VaultsList';\nimport OptionInfoBox from './OptionInfoBox';\n\nimport { getAllVaultsForOption } from '../../utils/graph';\nimport tracker from '../../utils/tracker';\n\nimport { ETH_ADDRESS } from '../../constants/contracts';\nimport { allOptions } from '../../constants/options';\n\nfunction OptionPage({ user }) {\n  const { token } = useParams();\n  tracker.pageview(`/option/${token}`);\n  const option = allOptions.find((o) => o.addr === token);\n\n  const [vaults, setVaults] = useState([]);\n\n  const collateralIsETH = option.collateral.addr === ETH_ADDRESS;\n\n  useMemo(async () => {\n    // Get All vaults once\n    const allVaults = await getAllVaultsForOption(token);\n    setVaults(allVaults);\n  }, [token]);\n\n  return (\n    <>\n      <Header\n        primary={option.name}\n        secondary={(\n          <ExerciseModal\n            user={user}\n            token={token}\n            vaults={vaults}\n          />\n        )}\n      />\n      {/* Basic Info Header */}\n      <OptionInfoBox\n        token={token}\n        collateralIsETH={collateralIsETH}\n      />\n      {/* List of Vaults */}\n      <VaultsList\n        token={token}\n        user={user}\n        vaults={vaults}\n        collateralIsETH={collateralIsETH}\n      />\n    </>\n  );\n}\n\nOptionPage.propTypes = {\n  user: PropTypes.string.isRequired,\n};\n\nexport default OptionPage;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\nimport { BalanceBlock, RatioTag, HelperText } from '../common';\nimport { formatDigits, toTokenUnitsBN } from '../../utils/number';\nimport * as MyPTypes from '../types';\n\nconst HeaderDashboard = ({\n  ratio,\n  minRatio,\n  symbol,\n  vault,\n  decimals,\n  newRatio,\n  collateralDecimals,\n  useCollateral,\n}) => {\n  const tokenInUnit = vault.oTokensIssued\n    ? toTokenUnitsBN(vault.oTokensIssued, decimals).toNumber()\n    : '0';\n  const collateralBalance = vault.collateral\n    ? toTokenUnitsBN(vault.collateral, collateralDecimals).toString()\n    : '0';\n\n  return (\n    <div style={{ padding: '2%', display: 'flex', alignItems: 'center' }}>\n      <div style={{ width: '30%' }}>\n        <BalanceBlock asset=\"Total Collateral\" balance={formatDigits(collateralBalance, 6)} />\n      </div>\n      <div style={{ width: '50%' }}>\n        <BalanceBlock asset={`${symbol} Issued`} balance={tokenInUnit.toString()} />\n      </div>\n      <div style={{ width: '20%' }}>\n        <>\n          <div style={{ fontSize: 14, padding: 3 }}>\n            Current Ratio\n            {' '}\n            {ratio > 0 ? (\n              <RatioTag isSafe={ratio >= minRatio} ratio={ratio} useCollateral={useCollateral} />\n            ) : (\n              <></>\n            )}\n          </div>\n          <div style={{ fontSize: 24, padding: 3 }}>\n            <span style={{ fontSize: 24 }}>{formatDigits(ratio, 5).split('.')[0]}</span>\n            .\n            <span style={{ fontSize: 18 }}>\n              {formatDigits(ratio, 5).split('.')[1]}\n              {' '}\n            </span>\n            {minRatio > 0 ? (\n              <span style={{ fontSize: 16 }}>\n                {' '}\n                /\n                {' '}\n                {minRatio}\n                {' '}\n              </span>\n            ) : ''}\n          </div>\n          <>\n            {' '}\n            {newRatio === ratio ? (\n              ''\n            ) : (\n              <HelperText label=\"New Ratio\" amt={newRatio.toString()} />\n            )}\n            {' '}\n          </>\n        </>\n      </div>\n    </div>\n  );\n};\n\nHeaderDashboard.propTypes = {\n  ratio: PropTypes.number.isRequired,\n  minRatio: PropTypes.number.isRequired,\n  symbol: PropTypes.string.isRequired,\n  vault: MyPTypes.vault.isRequired,\n  decimals: PropTypes.number.isRequired,\n  newRatio: PropTypes.number.isRequired,\n  collateralDecimals: PropTypes.number.isRequired,\n  useCollateral: PropTypes.bool.isRequired,\n};\n\nexport default HeaderDashboard;\n","import React, { useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport PropTypes from 'prop-types';\nimport {\n  Box, TextInput, Button, IconCirclePlus, IconCircleMinus,\n} from '@aragon/ui';\nimport { addETHCollateral, addERC20Collateral, removeCollateral } from '../../utils/web3';\n\nimport { BalanceBlock, MaxButton } from '../common';\n\nimport { formatDigits, toTokenUnitsBN, toBaseUnitBN } from '../../utils/number';\nimport { calculateRatio } from '../../utils/calculation';\nimport { ETH_ADDRESS } from '../../constants/contracts';\nimport * as MyPTypes from '../types';\n\n/**\n *\n * @param {{\n * isOwner: boolean,\n * strikePrice:number,\n * strikeValue:BigNumber,\n * collateralAssetBalance: BigNumber\n * collateral: {addr:string, symbol:string, decimals:number}\n * }} param0\n */\nfunction CollateralManagement({\n  isOwner,\n  vault,\n  collateral,\n  collateralAssetBalance, // Bignumber, / token unit\n  token,\n  owner,\n  strikeValue,\n  strikePrice,\n  minRatio,\n  setNewRatio,\n}) {\n  const [addCollateralAmt, setAddCollateralAmt] = useState(0); // in token unit\n  const [removeCollateralAmt, setRemoveCollateralAmt] = useState(0); // in token unit\n\n  const collateralIsETH = collateral.addr === ETH_ADDRESS;\n\n  /**\n   * @param {number} newCollateral in wei\n   */\n  // eslint-disable-next-line consistent-return\n  const updateNewRatio = (newCollateral) => {\n    if (!newCollateral || newCollateral <= 0) return 0;\n    const str = newCollateral.toString();\n    const newRatio = calculateRatio(str, vault.oTokensIssued, strikePrice, strikeValue);\n    setNewRatio(formatDigits(newRatio, 5));\n  };\n\n  return (\n    <Box heading=\"Collateral\">\n      <div style={{ display: 'flex' }}>\n        {/* balance */}\n        <div style={{ width: '30%' }}>\n          {BalanceBlock({\n            asset: `Your ${collateral.symbol} Balance`,\n            balance: formatDigits(collateralAssetBalance.toString(), 6),\n          })}\n        </div>\n        {/* Add collateral */}\n        <div style={{ width: '32%', paddingTop: '2%' }}>\n          <div style={{ display: 'flex' }}>\n            <div style={{ width: '60%' }}>\n              <>\n                <TextInput\n                  type=\"number\"\n                  wide\n                  value={addCollateralAmt}\n                  onChange={(event) => {\n                    const amt = event.target.value;\n                    if (amt === '') {\n                      setAddCollateralAmt(0);\n                      return;\n                    }\n                    setAddCollateralAmt(amt);\n                    const amtRaw = toBaseUnitBN(amt, collateral.decimals);\n                    const newCollateralInWei = new BigNumber(vault.collateral).plus(amtRaw).toNumber();\n                    updateNewRatio(newCollateralInWei);\n                  }}\n                />\n                <MaxButton\n                  onClick={() => {\n                    setAddCollateralAmt(collateralAssetBalance.toNumber());\n                    const collateralBalanceRaw = toBaseUnitBN(collateralAssetBalance, collateral.decimals);\n                    const newCollateral = new BigNumber(vault.collateral).plus(collateralBalanceRaw).toNumber();\n                    updateNewRatio(newCollateral);\n                  }}\n                />\n              </>\n            </div>\n            <div style={{ width: '40%' }}>\n              <Button\n                wide\n                icon={<IconCirclePlus />}\n                label=\"Add\"\n                onClick={() => {\n                  if (collateralIsETH) {\n                    addETHCollateral(token, owner, addCollateralAmt);\n                  } else {\n                    addERC20Collateral(\n                      collateral.addr,\n                      token,\n                      owner,\n                      toBaseUnitBN(addCollateralAmt, collateral.decimals),\n                    );\n                  }\n                }}\n              />\n            </div>\n          </div>\n        </div>\n        <div style={{ width: '6%' }} />\n        {/* Remove collateral */}\n        <div style={{ width: '32%', paddingTop: '2%' }}>\n          <div style={{ display: 'flex' }}>\n            <div style={{ width: '60%' }}>\n              <>\n                <TextInput\n                  type=\"number\"\n                  wide\n                  value={removeCollateralAmt}\n                  onChange={(event) => {\n                    const amt = event.target.value;\n                    if (amt === '') {\n                      setRemoveCollateralAmt(0);\n                      return;\n                    }\n                    setRemoveCollateralAmt(amt);\n                    const amtRaw = toBaseUnitBN(amt, collateral.decimals);\n                    const newCollateralWei = new BigNumber(vault.collateral).minus(amtRaw).toNumber();\n                    updateNewRatio(newCollateralWei);\n                  }}\n                />\n                <MaxButton\n                  onClick={() => {\n                    if (strikeValue.toNumber() <= 0) return;\n                    const strikePriceBN = new BigNumber(strikePrice);\n                    const tokenIssuedBN = new BigNumber(vault.oTokensIssued);\n                    const minRatioBN = new BigNumber(minRatio);\n                    const minCollateral = strikePriceBN.times(tokenIssuedBN).times(minRatioBN).times(strikeValue);\n                    // const minValueInStrike = strikePrice * vault.oTokensIssued * minRatio;\n                    // const minCollateral = minValueInStrike * strikeValue;\n                    const maxToRemove = new BigNumber(vault.collateral).minus(minCollateral).toString();\n                    const maxToRemoveInTokenUnit = toTokenUnitsBN(maxToRemove, collateral.decimals).toNumber();\n                    setRemoveCollateralAmt(maxToRemoveInTokenUnit);\n                    setNewRatio(minRatio);\n                  }}\n                />\n              </>\n            </div>\n            <div style={{ width: '40%' }}>\n              <Button\n                disabled={!isOwner}\n                wide\n                icon={<IconCircleMinus />}\n                label=\"Remove\"\n                onClick={() => {\n                  removeCollateral(\n                    collateral.addr,\n                    token,\n                    toBaseUnitBN(removeCollateralAmt, collateral.decimals).toString(),\n                  );\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </Box>\n  );\n}\n\nCollateralManagement.propTypes = {\n  isOwner: PropTypes.bool.isRequired,\n  vault: MyPTypes.vault.isRequired,\n  collateral: MyPTypes.token.isRequired,\n  collateralAssetBalance: PropTypes.instanceOf(BigNumber).isRequired,\n  token: PropTypes.string.isRequired,\n  owner: PropTypes.string.isRequired,\n  strikeValue: PropTypes.instanceOf(BigNumber).isRequired,\n  strikePrice: PropTypes.number.isRequired,\n  minRatio: PropTypes.number.isRequired,\n  setNewRatio: PropTypes.func.isRequired,\n};\n\nexport default CollateralManagement;\n","import React, { useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport PropTypes from 'prop-types';\nimport {\n  Box, TextInput, Button, IconCirclePlus, IconCircleMinus,\n} from '@aragon/ui';\nimport { burnOToken, issueOToken } from '../../utils/web3';\nimport { BalanceBlock, MaxButton } from '../common';\nimport { toBaseUnitBN, toTokenUnitsBN } from '../../utils/number';\nimport { calculateRatio } from '../../utils/calculation';\nimport * as MyPTypes from '../types';\n/**\n *\n * @param {{\n * strikeValue: BigNumber,\n * tokenBalance: BigNumber,\n * strikePrice: Number,\n * decimals: Number\n * }} param0\n */\nfunction IssuedTokenManagement({\n  isOwner,\n  vault,\n  tokenBalance,\n  token,\n  strikeValue,\n  strikePrice,\n  minRatio,\n  decimals,\n  symbol,\n  setNewRatio,\n}) {\n  const [issueAmt, setIssueAmt] = useState(new BigNumber(0));\n  const [burnAmt, setBurnAmt] = useState(new BigNumber(0));\n\n  /**\n   *\n   * @param {BigNumber} newAmt in raw amt\n   */\n  const updateNewRatio = (newAmt) => {\n    if (newAmt.lte(new BigNumber(0))) return;\n    const newRatio = calculateRatio(vault.collateral, newAmt, strikePrice, strikeValue);\n    setNewRatio(newRatio);\n  };\n\n  const onChangeIssueAmt = (intputAmt) => {\n    if (!intputAmt) {\n      setIssueAmt(new BigNumber(0));\n      return;\n    }\n    const amountBN = new BigNumber(intputAmt);\n    setIssueAmt(amountBN);\n    updateNewRatio(new BigNumber(vault.oTokensIssued).plus(toBaseUnitBN(amountBN, decimals)));\n  };\n\n  const onClickIssueToken = () => {\n    issueOToken(\n      token,\n      toBaseUnitBN(issueAmt, decimals).toString(),\n    );\n  };\n\n  const onChangeBurnAmt = (intputAmt) => {\n    if (!intputAmt) {\n      setBurnAmt(new BigNumber(0));\n      return;\n    }\n    const amountBN = new BigNumber(intputAmt);\n    updateNewRatio(new BigNumber(vault.oTokensIssued).minus(toBaseUnitBN(amountBN, decimals)));\n    setBurnAmt(amountBN);\n  };\n\n  const onClickBurnToken = () => {\n    burnOToken(\n      token,\n      toBaseUnitBN(burnAmt, decimals).toString(),\n    );\n  };\n\n  return (\n    <Box heading=\"Total Issued\">\n      <div style={{ display: 'flex' }}>\n        {/* total Issued */}\n        <div style={{ width: '30%' }}>\n          <BalanceBlock\n            asset={`Owner ${symbol} Balance `}\n            balance={tokenBalance.toString()}\n          />\n        </div>\n        {/* Issue More Token */}\n        <div style={{ width: '32%', paddingTop: '2%' }}>\n          <div style={{ display: 'flex' }}>\n            <div style={{ width: '60%' }}>\n              <>\n                <TextInput\n                  type=\"number\"\n                  wide\n                  value={issueAmt}\n                  onChange={(event) => onChangeIssueAmt(event.target.value)}\n                />\n                <MaxButton\n                  onClick={() => {\n                    if (strikePrice <= 0) return;\n                    const maxTotal = new BigNumber(vault.collateral).div(\n                      new BigNumber(minRatio).times(new BigNumber(strikePrice)).times(strikeValue),\n                    );\n                    const maxToIssueRaw = maxTotal.minus(new BigNumber(vault.oTokensIssued));\n                    const maxToIssue = toTokenUnitsBN(maxToIssueRaw, decimals);\n                    setIssueAmt(maxToIssue);\n                    setNewRatio(minRatio);\n                  }}\n                />\n              </>\n            </div>\n            <div style={{ width: '40%' }}>\n              <Button\n                disabled={!isOwner}\n                wide\n                icon={<IconCirclePlus />}\n                label=\"Issue\"\n                onClick={onClickIssueToken}\n              />\n            </div>\n          </div>\n        </div>\n        <div style={{ width: '6%' }} />\n        {/* Remove collateral */}\n        <div style={{ width: '32%', paddingTop: '2%' }}>\n          <div style={{ display: 'flex' }}>\n            <div style={{ width: '60%' }}>\n              <>\n                <TextInput\n                  type=\"number\"\n                  wide\n                  value={burnAmt}\n                  onChange={(event) => onChangeBurnAmt(event.target.value)}\n                />\n                <MaxButton\n                  onClick={() => {\n                    const issued = toTokenUnitsBN(vault.oTokensIssued, decimals);\n                    const maxToBurn = tokenBalance.lt(issued) ? tokenBalance : issued; // min (issued, tokenBalance)\n                    setBurnAmt(maxToBurn);\n                    updateNewRatio(issued.minus(maxToBurn));\n                  }}\n                />\n              </>\n            </div>\n            <div style={{ width: '40%' }}>\n              <Button\n                disabled={!isOwner}\n                wide\n                icon={<IconCircleMinus />}\n                label=\"Burn\"\n                onClick={onClickBurnToken}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </Box>\n  );\n}\n\nIssuedTokenManagement.propTypes = {\n  isOwner: PropTypes.bool.isRequired,\n  vault: MyPTypes.vault.isRequired,\n  tokenBalance: PropTypes.instanceOf(BigNumber).isRequired,\n  token: PropTypes.string.isRequired,\n  strikeValue: PropTypes.instanceOf(BigNumber).isRequired,\n  strikePrice: PropTypes.number.isRequired,\n  minRatio: PropTypes.number.isRequired,\n  decimals: PropTypes.number.isRequired,\n  symbol: PropTypes.string.isRequired,\n  setNewRatio: PropTypes.func.isRequired,\n};\n\nexport default IssuedTokenManagement;\n","import React, { useState, useMemo, useEffect } from 'react';\n\nimport {\n  Box, DataView, IdentityBadge, TransactionBadge, TextInput, Button,\n} from '@aragon/ui';\n\nimport PropTypes from 'prop-types';\nimport BigNumber from 'bignumber.js';\n\nimport { BalanceBlock, MaxButton } from '../common';\nimport { liquidate } from '../../utils/web3';\nimport { getMaxLiquidatable } from '../../utils/infura';\nimport { getLiquidationHistory } from '../../utils/graph';\nimport {\n  formatDigits, fromWei, toTokenUnitsBN, timeSince, toBaseUnitBN,\n} from '../../utils/number';\n\n/**\n *\n * @param {{userTokenBalance: BigNumber}} param0\n */\nfunction LiquidationHistory({\n  owner, token, isOwner, tokenDecimals, userTokenBalance,\n}) {\n  const [maxLiquidatable, setMaxLiquidatable] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [entries, setEntries] = useState([]);\n\n  const [amountToLiquidate, setAmtToLiquidate] = useState(0);\n\n  useEffect(() => {\n    async function updateLiquidatable() {\n      const maxToLiquidate = await getMaxLiquidatable(token, owner);\n      setMaxLiquidatable(toTokenUnitsBN(maxToLiquidate, tokenDecimals).toNumber());\n    }\n    updateLiquidatable();\n  }, [owner, token, tokenDecimals]);\n\n  useMemo(async () => {\n    async function updateList() {\n      const actions = await getLiquidationHistory(owner);\n      const actionsForThisVault = actions.filter(\n        (entry) => entry.vault.optionsContract.address === token,\n      ).sort((actionA, actionB) => {\n        if (actionA.timestamp > actionB.timestamp) return -1;\n        return 1;\n      });\n      setEntries(actionsForThisVault);\n      setIsLoading(false);\n    }\n    updateList();\n  }, [owner, token]);\n\n  return (\n    <>\n      {isOwner ? (\n        <></>\n      ) : (\n        <Box heading=\"Liquidate\">\n          <>\n            <div style={{ display: 'flex' }}>\n              {/* balance */}\n              <div style={{ width: '30%' }}>\n                <BalanceBlock asset=\"Max To Liquidate\" balance={maxLiquidatable} />\n              </div>\n              <div style={{ width: '70%', paddingTop: '2%' }}>\n                <div style={{ display: 'flex' }}>\n                  <div style={{ width: '60%' }}>\n                    <>\n                      <TextInput\n                        type=\"number\"\n                        wide\n                        value={amountToLiquidate}\n                        onChange={(event) => {\n                          setAmtToLiquidate(event.target.value);\n                        }}\n                      />\n                      <MaxButton\n                        onClick={() => {\n                          const maximum = Math.min(userTokenBalance.toNumber(), maxLiquidatable);\n                          setAmtToLiquidate(maximum);\n                        }}\n                      />\n                    </>\n                  </div>\n                  <div style={{ width: '40%' }}>\n                    <Button\n                      disabled={maxLiquidatable <= 0}\n                      label=\"Liquidate\"\n                      onClick={() => {\n                        const amtToLiquidate = toBaseUnitBN(\n                          amountToLiquidate,\n                          tokenDecimals,\n                        ).toString();\n                        liquidate(token, owner, amtToLiquidate);\n                      }}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </>\n        </Box>\n      )}\n\n      {/* History Section */}\n      <Box heading=\"History\">\n        <DataView\n          status={isLoading ? 'loading' : 'default'}\n          fields={['Tx', 'Amount', 'Liquidator', 'Date']}\n          entries={entries}\n          entriesPerPage={4}\n          renderEntry={({\n            collateralToPay, liquidator, timestamp, transactionHash,\n          }) => [\n            <TransactionBadge transaction={transactionHash} />,\n            formatDigits(fromWei(collateralToPay), 5),\n            <IdentityBadge entity={liquidator} />,\n            timeSince(parseInt(timestamp, 10) * 1000),\n          ]}\n        />\n      </Box>\n    </>\n  );\n}\n\nLiquidationHistory.propTypes = {\n  owner: PropTypes.string.isRequired,\n  token: PropTypes.string.isRequired,\n  isOwner: PropTypes.bool.isRequired,\n  tokenDecimals: PropTypes.number.isRequired,\n  userTokenBalance: PropTypes.instanceOf(BigNumber).isRequired,\n};\nexport default LiquidationHistory;\n","import React, { useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Box, DataView, IdentityBadge, TransactionBadge,\n} from '@aragon/ui';\n\n\nimport { getExerciseHistory } from '../../utils/graph';\nimport { formatDigits, toTokenUnitsBN, timeSince } from '../../utils/number';\n\nfunction ExerciseHistory({\n  owner, token, collateralDecimals, tokenDecimals,\n}) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [entries, setEntries] = useState([]);\n\n  useMemo(async () => {\n    const actions = await getExerciseHistory(owner, token);\n    setEntries(actions);\n    setIsLoading(false);\n  }, [owner, token]);\n\n  return (\n    <>\n      {/* History Section */}\n      <Box heading=\"History\">\n        <DataView\n          status={isLoading ? 'loading' : 'default'}\n          fields={['Tx', 'Collateral', 'oToken', 'Exerciser', 'Time']}\n          entries={entries}\n          entriesPerPage={4}\n          renderEntry={({\n            amtCollateralToPay, oTokensToExercise, exerciser, timestamp, transactionHash,\n          }) => [\n            <TransactionBadge transaction={transactionHash} />,\n            formatDigits(\n              toTokenUnitsBN(amtCollateralToPay, collateralDecimals).toNumber(),\n              5,\n            ),\n            formatDigits(\n              toTokenUnitsBN(oTokensToExercise, tokenDecimals).toNumber(),\n              5,\n            ),\n            <IdentityBadge entity={exerciser} />,\n            timeSince(parseInt(timestamp * 1000, 10)),\n          ]}\n        />\n      </Box>\n    </>\n  );\n}\n\nExerciseHistory.propTypes = {\n  owner: PropTypes.string.isRequired,\n  token: PropTypes.string.isRequired,\n  collateralDecimals: PropTypes.number.isRequired,\n  tokenDecimals: PropTypes.number.isRequired,\n};\n\nexport default ExerciseHistory;\n","import React, { useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Box, DataView, Button, TransactionBadge,\n} from '@aragon/ui';\nimport { BalanceBlock } from '../common';\nimport { removeUnderlying } from '../../utils/web3';\nimport { getRemoveUnderlyingHistory } from '../../utils/graph';\nimport { formatDigits, toTokenUnitsBN, timeSince } from '../../utils/number';\n\nfunction RemoveUnderlying({\n  owner, token, underlyingDecimals, underlyingAmount,\n}) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [entries, setEntries] = useState([]);\n\n  useMemo(async () => {\n    const actions = await getRemoveUnderlyingHistory(owner, token);\n    setEntries(actions);\n    setIsLoading(false);\n  }, [owner, token]);\n\n  return (\n    <>\n\n      <Box heading=\"Underlying\">\n        <div style={{ display: 'flex' }}>\n          {/* balance */}\n          <div style={{ width: '30%' }}>\n            {BalanceBlock({\n              asset: 'Redeemable',\n              balance: formatDigits(toTokenUnitsBN(underlyingAmount, underlyingDecimals), 6),\n            })}\n          </div>\n          <div style={{ width: '70%', padding: '2%' }}>\n            <Button\n              label=\"Redeem Underlying\"\n              onClick={() => { removeUnderlying(token); }}\n            />\n          </div>\n        </div>\n        <br />\n        <DataView\n          status={isLoading ? 'loading' : 'default'}\n          fields={['Tx', 'Amount', 'Timestamp']}\n          entries={entries}\n          entriesPerPage={4}\n          renderEntry={({\n            transactionHash, amount, timestamp,\n          }) => [\n            <TransactionBadge shorten={false} transaction={transactionHash} />,\n            formatDigits(\n              toTokenUnitsBN(amount, underlyingDecimals).toNumber(),\n              5,\n            ),\n            timeSince(parseInt(timestamp * 1000, 10)),\n          ]}\n        />\n      </Box>\n    </>\n  );\n}\n\nRemoveUnderlying.propTypes = {\n  owner: PropTypes.string.isRequired,\n  token: PropTypes.string.isRequired,\n  underlyingDecimals: PropTypes.number.isRequired,\n  underlyingAmount: PropTypes.string.isRequired,\n};\n\nexport default RemoveUnderlying;\n","import React, { useState, useMemo } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport {\n  Header, Tabs, Box, Timer, Button,\n} from '@aragon/ui';\n\nimport BigNumber from 'bignumber.js';\nimport HeaderDashboard from './HeaderDashboard';\nimport CollateralManagement from './CollateralManagement';\nimport IssuedTokenManagement from './IssuedTokenManagement';\nimport LiquidationHistory from './Liquidation';\nimport ExerciseHistory from './Exercise';\nimport UnderlyingManagement from './UnderlyingManagement';\n\nimport { Comment } from '../common';\n\nimport { toTokenUnitsBN } from '../../utils/number';\nimport { calculateRatio, calculateStrikeValueInCollateral } from '../../utils/calculation';\nimport { getTokenBalance, getBalance } from '../../utils/infura';\nimport { getVault } from '../../utils/graph';\nimport { redeem } from '../../utils/web3';\n\nimport { ETH_ADDRESS } from '../../constants/contracts';\nimport { allOptions } from '../../constants/options';\nimport tracker from '../../utils/tracker';\n\nfunction ManageVault({ user }) {\n  const { token, owner } = useParams();\n  tracker.pageview(`/manage/${token}`);\n  const option = allOptions.find((o) => o.addr === token);\n  const {\n    decimals, symbol, oracle, strike, strikePrice, minRatio,\n    collateral, expiry, underlying,\n  } = option;\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Tab Navigation\n  const [tabSelected, setTabSelected] = useState(0);\n\n  const [vault, setVault] = useState({});\n  const [strikeValueInCollateral, setStrikeValue] = useState(new BigNumber(0));\n  const [ratio, setRatio] = useState(0);\n\n  const [ownerTokenBalance, setOwnerTokenBalance] = useState(new BigNumber(0));\n  const [userTokenBalance, setUserTokenBalance] = useState(new BigNumber(0));\n  const [userCollateralAssetBalance, setUserCollateralAssetBalance] = useState(new BigNumber(0));\n\n  // status\n  const [noVault, setNoVault] = useState(true);\n  const [newRatio, setNewRatio] = useState(ratio);\n\n  const collateralIsETH = collateral.addr === ETH_ADDRESS;\n  const vaultUsesCollateral = collateral.addr !== strike.addr;\n\n  useMemo(() => {\n    let isCancelled = false;\n    async function updateInfo() {\n      const vaultToManage = await getVault(owner, token);\n      if (vaultToManage === null) {\n        setIsLoading(false);\n        return;\n      }\n\n      setNoVault(false);\n      const [_ownerTokenBalance, _userTokenBalance] = await Promise.all([\n        getTokenBalance(token, owner),\n        getTokenBalance(token, user),\n      ]);\n\n      // SetUserCollateralAmount\n      let collateralBalance = new BigNumber(0);\n      // let colltDecimals = 18;\n\n      if (collateralIsETH) {\n        collateralBalance = new BigNumber(await getBalance(user));\n      } else {\n        const userColltBalance = await getTokenBalance(collateral.addr, user);\n        collateralBalance = toTokenUnitsBN(userColltBalance, collateral.decimals);\n      }\n\n      const ownerTokenBalanceBN = toTokenUnitsBN(_ownerTokenBalance, decimals);\n      const userTokenBalanceBN = toTokenUnitsBN(_userTokenBalance, decimals);\n\n      const strikeValInCollt = await calculateStrikeValueInCollateral(\n        collateral.addr,\n        strike.addr,\n        oracle,\n        collateral.decimals,\n      );\n      const currentRatio = calculateRatio(\n        vaultToManage.collateral,\n        vaultToManage.oTokensIssued,\n        strikePrice,\n        strikeValInCollt,\n      );\n\n      if (!isCancelled) {\n        setStrikeValue(strikeValInCollt);\n        setVault(vaultToManage);\n        setOwnerTokenBalance(ownerTokenBalanceBN);\n        setUserTokenBalance(userTokenBalanceBN);\n        setRatio(currentRatio);\n        setUserCollateralAssetBalance(collateralBalance);\n        setIsLoading(false);\n      }\n    }\n    updateInfo();\n    const id = setInterval(updateInfo, 60000);\n\n    return () => {\n      isCancelled = true;\n      clearInterval(id);\n    };\n  }, [\n    collateral,\n    collateralIsETH,\n    decimals,\n    oracle,\n    owner,\n    strike,\n    strikePrice,\n    token,\n    user,\n  ]);\n\n  const isOwner = user === owner;\n\n  return noVault\n    ? isLoading ? (\n      <Comment text=\"Loading...\" />\n    )\n      : (\n        <Comment text=\"No Vault Found for this user under this contract\" />\n      ) : (\n        <>\n          <Header\n            primary={isOwner ? 'Manage My Vault' : 'Vault Detail'}\n            secondary={\n          expiry * 1000 > Date.now() ? (\n            <Timer end={new Date(expiry * 1000)} />\n          ) : (\n            <Button onClick={() => redeem(token)} label=\"Redeem\" />\n          )\n        }\n          />\n\n          <HeaderDashboard\n            owner={owner}\n            user={user}\n            ratio={ratio}\n            minRatio={minRatio}\n            vault={vault}\n            decimals={decimals}\n            symbol={symbol}\n            newRatio={newRatio}\n            useCollateral={vaultUsesCollateral}\n            collateralIsETH={collateralIsETH}\n            collateralDecimals={collateral.decimals}\n          />\n\n          <Tabs\n            items={['Collateral Management', 'Token Issuance', 'Liquidation', 'Exercise', 'Underlying Redemption']}\n            selected={tabSelected}\n            onChange={setTabSelected}\n          />\n\n          {tabSelected === 0 ? (\n            <CollateralManagement\n              isOwner={isOwner}\n              vault={vault}\n              collateralAssetBalance={userCollateralAssetBalance}\n              collateral={collateral}\n              token={token}\n              owner={owner}\n              strikeValue={strikeValueInCollateral}\n              strikePrice={strikePrice}\n              minRatio={minRatio}\n              setNewRatio={setNewRatio}\n            />\n          ) : (\n            <></>\n          )}\n\n          {tabSelected === 1 ? (\n            <IssuedTokenManagement\n              isOwner={isOwner}\n              vault={vault}\n              tokenBalance={ownerTokenBalance}\n              token={token}\n              strikeValue={strikeValueInCollateral}\n              strikePrice={strikePrice}\n              minRatio={minRatio}\n              decimals={decimals}\n              symbol={symbol}\n              setNewRatio={setNewRatio}\n            />\n          ) : (\n            <></>\n          )}\n\n          {tabSelected === 2 ? (\n            vaultUsesCollateral ? (\n              <LiquidationHistory\n                userTokenBalance={userTokenBalance}\n                isOwner={isOwner}\n                owner={owner}\n                token={token}\n                tokenDecimals={decimals}\n              />\n            ) : (\n              <Box> This vault cannot be liquidated </Box>\n            )\n          ) : (\n            <></>\n          )}\n\n          {tabSelected === 3 ? (\n            <ExerciseHistory\n              owner={owner}\n              token={token}\n              tokenDecimals={decimals}\n              collateralDecimals={collateral.decimals}\n            />\n          ) : (\n            <></>\n          )}\n\n          {tabSelected === 4 ? (\n            <UnderlyingManagement\n              owner={owner}\n              token={token}\n              underlyingDecimals={underlying.decimals}\n              underlyingAmount={vault.underlying}\n            />\n          ) : <> </>}\n        </>\n    );\n}\n\nManageVault.propTypes = {\n  user: PropTypes.string.isRequired,\n};\n\nexport default ManageVault;\n","import React from 'react';\nimport BigNumber from 'bignumber.js';\nimport PropTypes from 'prop-types';\n\nimport { BalanceBlock, AddressBlock } from '../common';\n\n/**\n *\n * @param {{ poolTokenBalance: BigNumber, poolETHBalance: BigNumber }}\n */\nconst TradePageHeader = ({\n  symbol, poolETHBalance, poolTokenBalance, uniswapExchange,\n}) => (\n  <div style={{ padding: '2%', display: 'flex', alignItems: 'center' }}>\n    <div style={{ width: '30%' }}>\n      <BalanceBlock asset=\"Total ETH Liquidity\" balance={poolETHBalance} />\n    </div>\n    <div style={{ width: '30%' }}>\n      <BalanceBlock asset={`${symbol} Liquidity`} balance={poolTokenBalance} />\n    </div>\n    <div style={{ width: '40%' }}>\n      <>\n        <AddressBlock label=\"Uniswap Contract\" address={uniswapExchange} />\n      </>\n    </div>\n  </div>\n);\n\nTradePageHeader.propTypes = {\n  symbol: PropTypes.string.isRequired,\n  poolETHBalance: PropTypes.instanceOf(BigNumber).isRequired,\n  poolTokenBalance: PropTypes.instanceOf(BigNumber).isRequired,\n  uniswapExchange: PropTypes.string.isRequired,\n};\n\nexport default TradePageHeader;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Box, TextInput, Button, IconCirclePlus, IconCircleMinus,\n} from '@aragon/ui';\nimport BigNumber from 'bignumber.js';\nimport { buyOTokensFromExchange, sellOTokensFromExchange } from '../../utils/web3';\n\nimport { getPremiumToPay, getPremiumReceived } from '../../utils/infura';\n\nimport { BalanceBlock, MaxButton, PriceSection } from '../common';\nimport { toBaseUnitBN, fromWei } from '../../utils/number';\n\n/**\n *\n * @param {{\n *  decimals: number\n *  tokenBalance: BigNumber\n * }} param0\n */\nfunction OptionExchange({\n  symbol, tokenBalance, token, exchange, decimals,\n}) {\n  const [buyAmt, setBuyAmt] = useState(new BigNumber(0));\n  const [sellAmt, setSellAmt] = useState(new BigNumber(0));\n  const [premiumToPay, setPremiumToPay] = useState(new BigNumber(0));\n  const [premiumReceived, setPremiumReceived] = useState(new BigNumber(0));\n\n  const updatePremiumToPay = async (amt) => {\n    const butAmountBN = new BigNumber(amt);\n    if (butAmountBN.lte(new BigNumber(0))) {\n      setPremiumToPay(new BigNumber(0));\n      return;\n    }\n    const amount = toBaseUnitBN(butAmountBN, decimals).toString();\n    const premium = await getPremiumToPay(exchange, token, amount);\n    setPremiumToPay(new BigNumber(fromWei(premium)));\n  };\n\n  const updatePremiumReceived = async (amt) => {\n    const sellAmountBN = new BigNumber(amt);\n    if (sellAmountBN.lte(new BigNumber(0))) {\n      setPremiumReceived(new BigNumber(0));\n      return;\n    }\n    const amount = toBaseUnitBN(sellAmountBN, decimals).toString();\n    const premium = await getPremiumReceived(exchange, token, amount);\n    setPremiumReceived(new BigNumber(premium));\n  };\n\n  return (\n    <Box heading=\"Exchange\">\n      <div style={{ display: 'flex' }}>\n        {/* total Issued */}\n        <div style={{ width: '30%' }}>\n          <BalanceBlock asset={`${symbol} Balance`} balance={tokenBalance} />\n        </div>\n        {/* Buy Token from Uniswap */}\n        <div style={{ width: '32%', paddingTop: '2%' }}>\n          <div style={{ display: 'flex' }}>\n            <div style={{ width: '60%' }}>\n              <>\n                <TextInput\n                  type=\"number\"\n                  wide\n                  value={buyAmt}\n                  onChange={(event) => {\n                    if (event.target.value) {\n                      setBuyAmt(event.target.value);\n                      updatePremiumToPay(event.target.value);\n                    } else {\n                      setBuyAmt(new BigNumber(0));\n                      updatePremiumToPay(new BigNumber(0));\n                    }\n                  }}\n                />\n              </>\n            </div>\n            <div style={{ width: '40%' }}>\n              <Button\n                wide\n                icon={<IconCirclePlus />}\n                label=\"Buy\"\n                onClick={() => {\n                  buyOTokensFromExchange(\n                    token,\n                    exchange,\n                    toBaseUnitBN(buyAmt, decimals).toString(),\n                    toBaseUnitBN(premiumToPay, 18).toString(),\n                  );\n                }}\n              />\n            </div>\n          </div>\n          <PriceSection label=\"Cost:\" amt={premiumToPay} symbol=\"\" />\n        </div>\n        <div style={{ width: '6%' }} />\n        {/* Remove collateral */}\n        <div style={{ width: '32%', paddingTop: '2%' }}>\n          <div style={{ display: 'flex' }}>\n            <div style={{ width: '60%' }}>\n              <>\n                <TextInput\n                  type=\"number\"\n                  wide\n                  value={sellAmt}\n                  onChange={(event) => {\n                    if (event.target.value) {\n                      setSellAmt(event.target.value);\n                      updatePremiumReceived(event.target.value);\n                    } else {\n                      setSellAmt(new BigNumber(0));\n                      updatePremiumReceived(new BigNumber(0));\n                    }\n                  }}\n                />\n                <MaxButton\n                  onClick={() => {\n                    setSellAmt(tokenBalance);\n                    updatePremiumReceived(tokenBalance);\n                  }}\n                />\n              </>\n            </div>\n            <div style={{ width: '40%' }}>\n              <Button\n                wide\n                icon={<IconCircleMinus />}\n                label=\"Sell\"\n                onClick={() => {\n                  sellOTokensFromExchange(\n                    token,\n                    exchange,\n                    toBaseUnitBN(sellAmt, decimals).toString(),\n                  );\n                }}\n              />\n            </div>\n          </div>\n          <PriceSection label=\"Premium\" amt={premiumReceived} />\n        </div>\n      </div>\n    </Box>\n  );\n}\n\nOptionExchange.propTypes = {\n  symbol: PropTypes.string.isRequired,\n  tokenBalance: PropTypes.instanceOf(BigNumber).isRequired,\n  token: PropTypes.string.isRequired,\n  exchange: PropTypes.string.isRequired,\n  decimals: PropTypes.number.isRequired,\n};\n\nexport default OptionExchange;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport BigNumber from 'bignumber.js';\nimport {\n  Box, TextInput, Button, IconCirclePlus, IconEthereum,\n} from '@aragon/ui';\nimport { addLiquidity } from '../../utils/web3';\n\nimport { BalanceBlock, MaxButton, PriceSection } from '../common';\nimport { toBaseUnitBN } from '../../utils/number';\n\n/**\n *\n * @param {{\n * poolTokenBalance: BigNumber,\n * poolETHBalance:BigNumber,\n * liquidityTokenSupply: BigNumber,\n * userTokenBalance: BigNumber,\n * userETHBalance:BigNumber\n * uniswapExchange: string\n * }} param0\n */\nfunction AddLiquidity({\n  otoken,\n  otokenSymbol,\n  otokenDecimals,\n  userTokenBalance,\n  userETHBalance,\n  uniswapExchange,\n  poolTokenBalance,\n  poolETHBalance,\n  liquidityTokenDecimals,\n  liquidityTokenSupply,\n}) {\n  const SLIPPAGE_RATE = 2;\n\n\n  const [amtETHToAdd, setAmtETHToAdd] = useState(new BigNumber(0));\n  const [amtTokenToAdd, setAmtTokenToAdd] = useState(new BigNumber(0));\n\n  const liquidityMinted = (liquidityTokenSupply.times(amtETHToAdd)).div(poolETHBalance);\n  const liquidityMintedMin = (liquidityMinted.times(new BigNumber(100 - SLIPPAGE_RATE))).div(new BigNumber(100));\n  const ethToTokenRatio = poolETHBalance.div(poolTokenBalance);\n  const tokenToEthRatio = poolTokenBalance.div(poolETHBalance);\n\n  const onChangeETHAmtToSend = (ethAmt) => {\n    if (!ethAmt) {\n      setAmtTokenToAdd(new BigNumber(0));\n      setAmtETHToAdd(new BigNumber(0));\n      return;\n    }\n\n    const newTokenAmt = (new BigNumber(ethAmt).times(tokenToEthRatio));\n    setAmtETHToAdd(new BigNumber(ethAmt));\n    setAmtTokenToAdd(newTokenAmt);\n  };\n\n  const onChangeTokenAmtToSend = (tokenAmt) => {\n    if (!tokenAmt) {\n      setAmtTokenToAdd(new BigNumber(0));\n      setAmtETHToAdd(new BigNumber(0));\n      return;\n    }\n\n    const newEthAmt = new BigNumber(tokenAmt).times(ethToTokenRatio);\n    setAmtETHToAdd(newEthAmt);\n    setAmtTokenToAdd(new BigNumber(tokenAmt));\n  };\n\n  return (\n    <Box heading=\"Add Liquidity\">\n      <div style={{ display: 'flex' }}>\n        {/* Pool Status */}\n        <div style={{ width: '30%' }}>\n          <BalanceBlock asset=\"ETH Balance\" balance={userETHBalance} />\n        </div>\n        {/* Add Liquidity too pool */}\n        <div style={{ width: '70%', paddingTop: '2%' }}>\n          <div style={{ display: 'flex' }}>\n            <div style={{ width: '35%', marginRight: '5%' }}>\n              <>\n                <TextInput\n                  adornmentPosition=\"end\"\n                  adornment={otokenSymbol}\n                  type=\"number\"\n                  wide\n                  value={amtTokenToAdd.toNumber()}\n                  onChange={(event) => {\n                    onChangeTokenAmtToSend(event.target.value);\n                  }}\n                />\n                <MaxButton\n                  onClick={() => {\n                    onChangeTokenAmtToSend(userTokenBalance);\n                  }}\n                />\n              </>\n            </div>\n            <div style={{ width: '35%', marginRight: '5%' }}>\n              <TextInput\n                adornmentPosition=\"end\"\n                adornment={<IconEthereum />}\n                type=\"number\"\n                wide\n                value={amtETHToAdd.toNumber()}\n                onChange={(event) => {\n                  onChangeETHAmtToSend(event.target.value);\n                }}\n              />\n              <PriceSection label=\"Mint\" amt={liquidityMinted} symbol=\"Pool Tokens\" />\n            </div>\n            <div style={{ width: '30%' }}>\n              <Button\n                wide\n                icon={<IconCirclePlus />}\n                label=\"Add Liquidity\"\n                onClick={() => {\n                  const maxToken = toBaseUnitBN(amtTokenToAdd, otokenDecimals).toString();\n                  const minLiquidity = toBaseUnitBN(liquidityMintedMin, liquidityTokenDecimals).toString();\n                  const ethWei = toBaseUnitBN(amtETHToAdd, 18).toString();\n                  addLiquidity(\n                    otoken,\n                    uniswapExchange,\n                    maxToken,\n                    minLiquidity,\n                    ethWei,\n                  );\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </Box>\n  );\n}\n\nAddLiquidity.propTypes = {\n  otoken: PropTypes.string.isRequired,\n  otokenSymbol: PropTypes.string.isRequired,\n  otokenDecimals: PropTypes.number.isRequired,\n  userTokenBalance: PropTypes.instanceOf(BigNumber).isRequired,\n  userETHBalance: PropTypes.instanceOf(BigNumber).isRequired,\n  uniswapExchange: PropTypes.string.isRequired,\n  poolTokenBalance: PropTypes.instanceOf(BigNumber).isRequired,\n  poolETHBalance: PropTypes.instanceOf(BigNumber).isRequired,\n  liquidityTokenDecimals: PropTypes.number.isRequired,\n  liquidityTokenSupply: PropTypes.instanceOf(BigNumber).isRequired,\n};\n\nexport default AddLiquidity;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Box, TextInput, Button, IconCircleMinus, IconFundraising,\n} from '@aragon/ui';\nimport BigNumber from 'bignumber.js';\nimport { removeLiquidity } from '../../utils/web3';\n\nimport { BalanceBlock, MaxButton, PriceSection } from '../common';\nimport { toBaseUnitBN } from '../../utils/number';\n\n/**\n *\n * @param {{\n *  otokenDecimals: number,\n *  liquidityTokenDecimals: number,\n *  otokenSymbol: string,\n *  uniswapExchange: string\n *  userliquidityTokenBalance: BigNumber\n *  poolTokenBalance: BigNumber\n *  poolETHBalance: BigNumber\n *  liquidityTokenDecimals: BigNumber\n *  liquidityTokenSupply: BigNumber\n *\n * }} param0\n */\nfunction RemoveLiquidity({\n  otokenSymbol,\n  otokenDecimals,\n  userliquidityTokenBalance,\n  uniswapExchange,\n  poolTokenBalance,\n  poolETHBalance,\n  liquidityTokenDecimals,\n  liquidityTokenSupply,\n}) {\n  const SLIPPAGE_RATE = 2;\n\n  const [amtLiquidityTokenToSell, setAmtLiquidityTokenToSell] = useState(new BigNumber(0));\n\n  const poolPortion = amtLiquidityTokenToSell.div(liquidityTokenSupply);\n  const estETHRecieved = poolETHBalance.times(poolPortion);\n  const estOTokenReceived = poolTokenBalance.times(poolPortion);\n\n  const minETHReceived = estETHRecieved.times(new BigNumber(100 - SLIPPAGE_RATE)).div(new BigNumber(100));\n  const minTokenReceived = estOTokenReceived.times(new BigNumber(100 - SLIPPAGE_RATE)).div(new BigNumber(100));\n  const onChangeTokenAmtToSend = (tokenAmt) => {\n    if (!tokenAmt) {\n      setAmtLiquidityTokenToSell(new BigNumber(0));\n      return;\n    }\n    const tokenAmtBN = new BigNumber(tokenAmt);\n    setAmtLiquidityTokenToSell(tokenAmtBN);\n  };\n\n  return (\n    <Box heading=\"Remove Liquidity\">\n      <div style={{ display: 'flex' }}>\n        {/* Pool Token in Hold */}\n        <div style={{ width: '30%' }}>\n          <BalanceBlock asset=\"Pool Token Balance\" balance={userliquidityTokenBalance} />\n        </div>\n        {/* Remove */}\n        <div style={{ width: '70%', paddingTop: '2%' }}>\n          <div style={{ display: 'flex' }}>\n            <div style={{ width: '35%', marginRight: '5%' }}>\n              <TextInput\n                adornmentPosition=\"end\"\n                adornment={<IconFundraising />}\n                type=\"number\"\n                wide\n                value={amtLiquidityTokenToSell.toNumber()}\n                onChange={(event) => {\n                  onChangeTokenAmtToSend(event.target.value);\n                }}\n              />\n              <MaxButton\n                onClick={() => setAmtLiquidityTokenToSell(userliquidityTokenBalance)}\n              />\n            </div>\n            <div style={{ width: '35%', marginRight: '5%' }}>\n              <>\n                <PriceSection label=\"You get\" amt={estETHRecieved} symbol=\"ETH\" />\n                <PriceSection label=\"+\" amt={estOTokenReceived} symbol={otokenSymbol} />\n              </>\n            </div>\n            <div style={{ width: '30%' }}>\n              <Button\n                wide\n                icon={<IconCircleMinus />}\n                label=\"Remove Liquidity\"\n                onClick={() => {\n                  const amt = toBaseUnitBN(amtLiquidityTokenToSell, liquidityTokenDecimals).toString();\n                  const min_eth = toBaseUnitBN(minETHReceived, 18).toString();\n                  const min_token = toBaseUnitBN(minTokenReceived, otokenDecimals).toString();\n\n                  removeLiquidity(\n                    uniswapExchange,\n                    amt,\n                    min_eth,\n                    min_token,\n                  );\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </Box>\n  );\n}\n\nRemoveLiquidity.propTypes = {\n  otokenSymbol: PropTypes.string.isRequired,\n  otokenDecimals: PropTypes.number.isRequired,\n  userliquidityTokenBalance: PropTypes.instanceOf(BigNumber).isRequired,\n  uniswapExchange: PropTypes.string.isRequired,\n  poolTokenBalance: PropTypes.instanceOf(BigNumber).isRequired,\n  poolETHBalance: PropTypes.instanceOf(BigNumber).isRequired,\n  liquidityTokenDecimals: PropTypes.number.isRequired,\n  liquidityTokenSupply: PropTypes.instanceOf(BigNumber).isRequired,\n};\n\nexport default RemoveLiquidity;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport { Header } from '@aragon/ui';\n\nimport BigNumber from 'bignumber.js';\nimport {\n  getTokenBalance, getBalance, getTotalSupply,\n} from '../../utils/infura';\nimport { toTokenUnitsBN } from '../../utils/number';\n\nimport { allOptions } from '../../constants/options';\n\nimport TradePageHeader from './Header';\nimport OptionExchange from './OptionExchange';\nimport AddLiquidity from './AddLiquidity';\nimport RemoveLiquidity from './RemoveLiquidity';\n\nimport tracker from '../../utils/tracker';\n\nfunction UniswapPool({ user }) {\n  const liquidityTokenDecimals = 18;\n\n  const { token } = useParams();\n  tracker.pageview(`trade/${token}`);\n  const option = allOptions.find((o) => o.addr === token);\n  const {\n    uniswapExchange, decimals, symbol, exchange,\n  } = option;\n\n  const [poolTokenBalance, setPoolTokenBalance] = useState(new BigNumber(0));\n  const [userTokenBalance, setUserTokenBalance] = useState(new BigNumber(0));\n  const [poolETHBalance, setPoolETHBalance] = useState(new BigNumber(0));\n  const [userETHBalance, setUserETHBalance] = useState(new BigNumber(0));\n\n  const [userliquidityTokenBalance, setUserLiquidityTokenBalance] = useState(new BigNumber(0));\n  const [liquidityTokenSupply, setLiquidityTokenSupply] = useState(new BigNumber(0));\n\n  // Update Uniswap Pool Info\n  useEffect(() => {\n    let isCancelled = false;\n\n    async function updatePoolInfo() {\n      const [exTokenBalance, exchagneETHBalance, liqTokenTotalSupply] = await Promise.all([\n        getTokenBalance(token, uniswapExchange),\n        getBalance(uniswapExchange),\n        getTotalSupply(uniswapExchange),\n      ]);\n      // const { decimals: liqTokenDecimal, totalSupply: liqTokenTotalSupply } = liquidityTokenInfo;\n      const exchangeTokenBalance = toTokenUnitsBN(exTokenBalance, decimals);\n      if (!isCancelled) {\n        setLiquidityTokenSupply(toTokenUnitsBN(liqTokenTotalSupply, liquidityTokenDecimals));\n        setPoolETHBalance(new BigNumber(exchagneETHBalance));\n        setPoolTokenBalance(exchangeTokenBalance);\n      }\n    }\n    updatePoolInfo();\n    const id = setInterval(updatePoolInfo, 15000);\n\n    return () => {\n      isCancelled = true;\n      clearInterval(id);\n    };\n  }, [decimals, token, uniswapExchange]);\n\n  // Update User balances\n  useEffect(() => {\n    if (user === '') return;\n    let isCancelled = false;\n\n    async function updateUserInfo() {\n      const [tokenBalance, userEthBalance, liqTokenBalance] = await Promise.all([\n        getTokenBalance(token, user),\n        getBalance(user),\n        getTokenBalance(uniswapExchange, user),\n      ]);\n\n      const userOTknBalanceBN = toTokenUnitsBN(tokenBalance, decimals);\n      const userLiqTknBalanceBN = toTokenUnitsBN(liqTokenBalance, liquidityTokenDecimals);\n      if (!isCancelled) {\n        setUserLiquidityTokenBalance(userLiqTknBalanceBN);\n        setUserETHBalance(new BigNumber(userEthBalance));\n        setUserTokenBalance(userOTknBalanceBN);\n      }\n    }\n    updateUserInfo();\n    const id = setInterval(updateUserInfo, 15000);\n\n    // eslint-disable-next-line consistent-return\n    return () => {\n      isCancelled = true;\n      clearInterval(id);\n    };\n  }, [decimals, liquidityTokenDecimals, token, uniswapExchange, user]);\n\n  return (\n    <>\n      <Header primary=\"Exchange\" />\n\n      <TradePageHeader\n        user={user}\n        symbol={symbol}\n        poolETHBalance={poolETHBalance}\n        poolTokenBalance={poolTokenBalance}\n        uniswapExchange={uniswapExchange}\n      />\n\n      <OptionExchange\n        symbol={symbol}\n        tokenBalance={userTokenBalance}\n        token={token}\n        exchange={exchange}\n        decimals={decimals}\n      />\n\n      <Header primary=\"Provide Liquidity\" />\n\n      <AddLiquidity\n        user={user}\n        otoken={token}\n        otokenDecimals={decimals}\n        otokenSymbol={symbol}\n        userTokenBalance={userTokenBalance}\n        userliquidityTokenBalance={userliquidityTokenBalance}\n        userETHBalance={userETHBalance}\n        uniswapExchange={uniswapExchange}\n        poolETHBalance={poolETHBalance}\n        poolTokenBalance={poolTokenBalance}\n        liquidityTokenDecimals={liquidityTokenDecimals}\n        liquidityTokenSupply={liquidityTokenSupply} // in base unit\n      />\n\n      <RemoveLiquidity\n        otokenDecimals={decimals}\n        otokenSymbol={symbol}\n        userliquidityTokenBalance={userliquidityTokenBalance}\n        userETHBalance={userETHBalance}\n        uniswapExchange={uniswapExchange}\n        poolETHBalance={poolETHBalance}\n        poolTokenBalance={poolTokenBalance}\n        liquidityTokenDecimals={liquidityTokenDecimals}\n        liquidityTokenSupply={liquidityTokenSupply} // in base unit\n      />\n    </>\n  );\n}\n\nUniswapPool.propTypes = {\n  user: PropTypes.string.isRequired,\n};\n\nexport default UniswapPool;\n","import React from 'react';\n\nimport { Link } from '@aragon/ui';\nimport PropTypes from 'prop-types';\n\nfunction Footer({ theme }) {\n  const style = {\n    backgroundColor: theme === 'light' ? '#F8F8F8' : '#35425e',\n    textAlign: 'center',\n    padding: '17px',\n    position: 'fixed',\n    left: '0',\n    bottom: '0',\n    height: '50px',\n    width: '100%',\n    fontSize: '12px',\n  };\n\n  return (\n    <div style={style}>\n      Powered By\n      <Link external href=\"https://opyn.co/#/\">\n        Opyn\n      </Link>\n      {', '}\n      <Link external href=\"https://ui.aragon.org/\">\n        Aragon UI\n      </Link>\n      ,\n      {', '}\n      <Link external href=\"https://www.blocknative.com/\">\n        Blocknative\n      </Link>\n      {'. '}\n      <Link external href=\"https://www.kollateral.co/\">\n        Kollateral\n      </Link>\n      {'. '}\n      Hosted on\n      <Link external href=\"https://github.com/antoncoding/opyn-liquidator\">\n        GitHub\n      </Link>\n      .\n    </div>\n  );\n}\n\nFooter.propTypes = {\n  theme: PropTypes.string.isRequired,\n};\n\nexport default Footer;\n","import React, { useState } from 'react';\n\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Main } from '@aragon/ui';\nimport { updateModalMode } from './utils/web3';\nimport { storePreference, getPreference } from './utils/storage';\nimport NavBar from './components/NavBar';\nimport HomePage from './components/HomePage';\nimport AllOptoins from './components/AllContracts';\nimport Trade from './components/Trade';\nimport MyVaults from './components/MyVaults';\nimport OptionPage from './components/OptionPage';\nimport ManageVault from './components/ManageVault';\nimport Uniswap from './components/UniswapTrade';\nimport Footer from './components/Footer';\n\nfunction App() {\n  const storedTheme = getPreference('theme', 'light');\n\n  const [user, setUser] = useState(''); // the current connected user\n  const [theme, setTheme] = useState(storedTheme);\n\n  const updateTheme = (newTheme) => {\n    setTheme(newTheme);\n    updateModalMode(newTheme);\n    storePreference('theme', newTheme);\n  };\n\n  return (\n    <Router>\n      <Main assetsUrl={`${process.env.PUBLIC_URL}/aragon-ui/`} theme={theme}>\n        <NavBar user={user} setUser={setUser} theme={theme} updateTheme={updateTheme} />\n\n        <Switch>\n          {/* All Options */}\n          <Route path=\"/option/:token\">\n            <OptionPage user={user} />\n          </Route>\n          <Route path=\"/options/\">\n            <AllOptoins />\n          </Route>\n          {/* My Vaults */}\n          <Route path=\"/myvaults\">\n            <MyVaults user={user} />\n          </Route>\n          <Route path=\"/manage/:token/:owner\">\n            <ManageVault user={user} />\n          </Route>\n          {/* Trade */}\n          <Route path=\"/trade/:token/\"><Uniswap user={user} /></Route>\n          <Route path=\"/trade/\">\n            <Trade />\n          </Route>\n          {/* HomePage */}\n          <Route path=\"/\"><HomePage /></Route>\n        </Switch>\n        <Footer theme={theme} />\n      </Main>\n    </Router>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}