{"version":3,"sources":["utils/graph.js","utils/common.js","utils/infura.js","utils/blockNative.js","utils/web3.js","components/VaultOwnerList.js","components/ConnectButton.js","components/VaultInfoBox.js","constants/addresses.js","constants/parameters.js","App.js","serviceWorker.js","index.js"],"names":["opynGraphEndpoint","getAllVaultOwners","a","options","method","headers","body","JSON","stringify","query","fetch","res","json","actions","data","vaultOpenedActions","owners","map","action","owner","Set","formatDigits","num","percision","parseFloat","toFixed","optionContractABI","require","oracleABI","Promise","web3","Web3","getOptionContractDetail","oToken","all","getOptionName","getBalance","getTotalSupply","name","balance","totalSupply","getVaults","oTokenContract","eth","Contract","methods","getVault","call","collateral","utils","fromWei","oTokensIssued","underlying","owned","filter","vault","vaults","getVaultsWithLiquidatable","maxLiquidatable","isUnsafe","maxOTokensLiquidatable","NewVaults","sort","compare","address","token","getPrice","oracleAddr","oracle","price","decimals","parseInt","ownerA","ownerB","rateA","ratio","rateB","comparison","notify","Notify","dappId","networkId","oTokenABI","liquidate","oTokenAddr","window","ethereum","enable","accounts","balanceOf","userbalance","maxToSend","Math","min","toString","send","from","on","hash","VaultOwnerList","state","isLoading","underlyingPrice","componentDidMount","props","vaultDetail","valueProtectingInEth","isSafe","minRatio","vaultWithLiquidatable","setState","heading","status","this","fields","entries","entriesPerPage","renderEntry","entity","shorten","background","color","mode","onClick","console","log","Component","ConnectButton","connectWeb3","isConnected","account","connectedAccount","VaultBox","supply","primary","secondary","padding","tokenName","mainnet","minCollateralizationRatio","App","mainnetParams","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.38e5c42e.chunk.js","sourcesContent":["// const prefix = 'https://cors-anywhere-anton.herokuapp.com/';\nconst opynGraphEndpoint = 'https://api.thegraph.com/subgraphs/name/aparnakr/opyn'\n\n/**\n * @return {Promise<Array<string>>}\n */\nexport async function getAllVaultOwners(){\n  const query = `{\n    vaultOpenedActions(first: 100, ) {\n      owner\n    }\n  }`\n  const options = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ query }),\n  }\n  const res = await fetch(opynGraphEndpoint,  options)\n  const actions = (await res.json()).data.vaultOpenedActions\n  const owners = actions.map(action => action.owner)\n  return [...new Set(owners)]\n\n  // return [\"0xfb338c5fe584c026270e5ded1c2e0aca786a22fe\" ,\"0x7e5ce10826ee167de897d262fcc9976f609ecd2b\" ,\"0xabc04058e20c9cba4f360244648fedf30cebc3b4\" ,\"0x97c7c0c55a4ae424e9164bbc5cf8aa139cae5eec\" ,\"0x78353498a7c2741d52de5ef45e58bd17148a6297\" ,\"0x81bb32e4a7e4d0500d11a52f3a5f60c9a6ef126c\" ,\"0xd4c80637f45a55b5e1afa9cd0c935395063d4523\" ,\"0x855328ee5e94924cb83b267f25a513c2a2fc3e5e\"]\n}","export function formatDigits(num, percision) {\n  return parseFloat(num).toFixed(percision)\n}","import Web3 from 'web3';\nimport { formatDigits } from './common'\n\nconst optionContractABI = require('../constants/abi/OptionContract.json')\nconst oracleABI = require('../constants/abi/Oracle.json')\n\nconst Promise = require('bluebird');\nconst web3 = new Web3('https://mainnet.infura.io/v3/44fd23cda65746a699a5d3c0e2fa45d5');\n\n/**\n * Call only once\n * @param {*} oToken\n */\nexport const getOptionContractDetail = async (oToken) => {\n  const [name, balance, totalSupply] = await Promise.all([\n    getOptionName(oToken),\n    getBalance(oToken), \n    getTotalSupply(oToken)]\n  );\n  return {\n    name,\n    balance,\n    totalSupply,\n  };\n};\n\n/**\n *\n * @param {Array<string>} owners\n * @param {string} oToken\n */\nexport const getVaults = async (owners, oToken) => {\n  const oTokenContract = new web3.eth.Contract(optionContractABI, oToken);\n\n  const vaults = await Promise.map(owners, async (owner) => {\n    const res = await oTokenContract.methods.getVault(owner).call();\n    const collateral = formatDigits(web3.utils.fromWei(res[0]), 6);\n    const oTokensIssued = res[1];\n    const underlying = res[2];\n    const owned = res[3];\n    return { collateral, oTokensIssued, underlying, owned, owner };\n  }).filter((vault) => vault.owned && parseFloat(vault.collateral) > 0)\n  \n    return vaults \n};\n\nexport const getVaultsWithLiquidatable = async(vaults, oToken) => {\n  const oTokenContract = new web3.eth.Contract(optionContractABI, oToken);\n  const NewVaults = await Promise.map(vaults, async(vault) => {\n    let maxLiquidatable = 0\n    if(vault.isUnsafe) {\n      maxLiquidatable = await oTokenContract.methods\n        .maxOTokensLiquidatable(vault.owner)\n        .call();\n    }\n    vault.maxLiquidatable = maxLiquidatable\n    return vault\n  })\n  return NewVaults.sort(compare);\n}\n\nexport const getOptionName = async(address) => {\n  const token = new web3.eth.Contract(optionContractABI, address);\n  const name = await token.methods.name().call();\n  // const name = await web3.eth.name.call();\n  return name\n}\n\n/**\n * Get balance of accounts\n * @param {string} address\n */\nexport const getBalance = async (address) => {\n  const balance = await web3.eth.getBalance(address);\n  return web3.utils.fromWei(balance);\n};\n\nexport const getPrice = async (oracleAddr, token) => {\n  const oracle = new web3.eth.Contract(oracleABI, oracleAddr);\n  const price = await oracle.methods.getPrice(token).call();\n  return web3.utils.fromWei(price); // price base eth/ per token\n};\n\nexport const getTotalSupply = async (address) => {\n  const token = new web3.eth.Contract(optionContractABI, address);\n  const totalSupply = await token.methods.totalSupply().call();\n  const decimals = await token.methods.decimals().call();\n  return parseInt(totalSupply) / 10 ** parseInt(decimals);\n};\n\nfunction compare(ownerA, ownerB) {\n  const rateA = ownerA.ratio;\n  const rateB = ownerB.ratio;\n\n  let comparison = 0;\n  if (rateA > rateB) {\n    comparison = 1;\n  } else if (rateA < rateB) {\n    comparison = -1;\n  }\n  return comparison;\n}\n","import Notify from \"bnc-notify\"\n\nexport const notify = Notify({\n  dappId: '7e7c9d55-dd5e-4ee1-bc38-edf27b59ce06',\n  networkId: 1\n});\n\n","import Web3 from 'web3'\nimport { notify } from './blockNative'\nconst oTokenABI = require('../constants/abi/OptionContract.json')\n\nexport const liquidate = async(oTokenAddr, owner, maxLiquidatable) => {\n  const accounts = await window.ethereum.enable();\n  const web3 = new Web3(window.ethereum);\n  const oToken = new web3.eth.Contract(oTokenABI, oTokenAddr)\n  const userbalance = await oToken.methods.balanceOf(accounts[0]).call()\n  const maxToSend = Math.min(\n      parseInt(userbalance, 10), \n      parseInt(maxLiquidatable, 10)\n  ).toString();\n  \n  await oToken.methods.liquidate(owner, maxToSend).send({from: accounts[0]})\n    .on('transactionHash', (hash)=>{\n      notify.hash(hash)\n    })\n}","import React, { Component } from 'react';\nimport { Tag, DataView, IdentityBadge, LinkBase } from '@aragon/ui';\nimport { getAllVaultOwners } from '../utils/graph';\nimport { getVaults, getPrice, getVaultsWithLiquidatable } from '../utils/infura';\nimport { liquidate } from '../utils/web3';\nimport { formatDigits } from '../utils/common';\nclass VaultOwnerList extends Component {\n  state = {\n    isLoading: true,\n    underlyingPrice: '0',\n    vaults: [], // { account, maxLiquidatable, collateral, oTokensIssued, ratio } []\n  };\n\n  componentDidMount = async () => {\n    const owners = await getAllVaultOwners();\n    const vaults = await getVaults(owners, this.props.oToken);\n\n    const underlyingPrice = await getPrice(this.props.oracle, this.props.underlying);\n\n    const vaultDetail = vaults.map((vault) => {\n      const oTokensIssued = formatDigits(\n        parseInt(vault.oTokensIssued) / 10 ** this.props.decimals,\n        4\n      );\n      const valueProtectingInEth = parseFloat(underlyingPrice) * oTokensIssued;\n      const ratio = formatDigits(parseFloat(vault.collateral) / valueProtectingInEth, 4);\n      vault.oTokensIssued = oTokensIssued;\n      vault.ratio = ratio;\n      vault.isSafe = ratio > this.props.minRatio;\n      return vault;\n    });\n\n    const vaultWithLiquidatable = await getVaultsWithLiquidatable(vaultDetail);\n    this.setState({\n      vaults: vaultWithLiquidatable,\n      isLoading: false,\n      underlyingPrice,\n    });\n  };\n\n  render() {\n    return (\n      <DataView\n        heading={<h3> All Vaults </h3>}\n        status={this.state.isLoading ? 'loading' : 'default'}\n        fields={['Owner', 'Collecteral', 'Issued', 'RATIO', 'Status']}\n        entries={this.state.vaults}\n        entriesPerPage={6}\n        renderEntry={({ owner, collateral, oTokensIssued, ratio, maxLiquidatable, isSafe }) => {\n          return [\n            <IdentityBadge entity={owner} shorten={true} />,\n            collateral,\n            oTokensIssued,\n            ratio,\n            isSafe ? (\n              ratio < 1.7 ? (\n                <Tag\n                  background='#FFEBAD'\n                  color='#FEC100'\n                > Danger </Tag>\n              ) : (\n                <Tag mode='new'> safe </Tag>\n              )\n            ) : (\n              <LinkBase\n                onClick={() => {\n                  console.log(`can liquidate max ${maxLiquidatable}`);\n                  liquidate(this.props.oToken, owner, maxLiquidatable);\n                }}\n              >\n                <Tag color='#E34343' background='#FFC6C6'>\n                  Unsafe!\n                </Tag>\n              </LinkBase>\n            ),\n          ];\n        }}\n      />\n    );\n  }\n}\n\nexport default VaultOwnerList;\n","import React, { Component } from 'react'\nimport { Button, IdentityBadge } from '@aragon/ui'\n\nclass ConnectButton extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      isConnected: false,\n      account: ''\n    }\n  }\n\n  connectWeb3 = async() => {\n    const accounts = await window.ethereum.enable();\n    this.setState({\n      isConnected: true,\n      account: accounts[0]\n    })\n    return true\n  }\n\n  render() {\n    return (\n      this.state.isConnected ? \n      <IdentityBadge \n        entity={this.state.account}\n        connectedAccount\n      /> :\n      <Button\n        onClick={this.connectWeb3}\n      > Connect </Button> \n    )\n  }\n}\n\nexport default ConnectButton\n","import React, { Component } from 'react';\nimport { Box, Split, Header, IdentityBadge } from '@aragon/ui';\nimport ConnectButton from './ConnectButton';\nimport { getOptionContractDetail } from '../utils/infura';\n\nclass VaultBox extends Component {\n  state = {\n    name: 'oToken',\n    balance: '0',\n    supply: '0',\n  };\n\n  async componentDidMount() {\n    const { balance, totalSupply, name } = await getOptionContractDetail(this.props.oToken);\n    this.setState({ balance, supply: totalSupply, name });\n  }\n\n  render() {\n    return (\n      <>\n        <Header primary={this.state.name} secondary={<ConnectButton />} />\n        <Split\n          primary={\n            <Split\n              primary={\n                <Box heading={'contract'} padding={30}>\n                  <IdentityBadge\n                    entity={this.props.oToken}\n                    shorten={false}\n                  />\n                </Box>\n              }\n              secondary={\n                <Box heading={'balance'} padding={30}>\n                  {this.state.balance}\n                </Box>\n              }\n            />\n          }\n          secondary={\n            <Box heading={'supply'} padding={30}>\n              {this.state.supply} {this.props.tokenName}\n            </Box>\n          }\n        />\n      </>\n    );\n  }\n}\n\nexport default VaultBox;\n","export const mainnet = {\n  ocDAI: '0xddac4aed7c8f73032b388efe2c778fc194bc81ed',\n  // ocDAI: '0x98cc3bd6af1880fcfda17ac477b2f612980e5e33',\n  ocUSDC: '0x8ed9f862363ffdfd3a07546e618214b6d59f03d4'\n}","export const mainnet = {\n  ocDAI: {\n    tokenName: 'ocDai',\n    decimals: 8,\n    oracle: '0x7054e08461e3eCb7718B63540adDB3c3A1746415',\n    collateral: '0x0000000000000000000000000000000000000000',\n    underlying: '0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643',\n    minCollateralizationRatio: 1.6,\n  },\n  ocUSDC: {\n    tokenName: 'ocUSDC',\n    decimals: 8,\n    oracle: '0x7054e08461e3eCb7718B63540adDB3c3A1746415',\n    collateral: '0x0000000000000000000000000000000000000000',\n    underlying: '0x39aa39c021dfbae8fac545936693ac917d5e7563',\n    minCollateralizationRatio: 1.6,\n  }\n}","import React from 'react';\n\nimport { Main } from '@aragon/ui'\nimport VaultOwnerList from './components/VaultOwnerList'\nimport Overview from './components/VaultInfoBox'\n// import ConnectButton from './components/ConnectButton'\nimport './App.css';\n\nimport { mainnet } from './constants/addresses'\nimport { mainnet as mainnetParams } from './constants/parameters'\nfunction App() {\n  return (\n    <Main>\n      <Overview\n        oToken={mainnet.ocDAI}\n        tokenName={mainnetParams.ocDAI.tokenName}\n      />\n      <VaultOwnerList\n        oToken={mainnet.ocDAI}\n        decimals={mainnetParams.ocDAI.decimals}\n        underlying={mainnetParams.ocDAI.underlying}\n        minRatio={mainnetParams.ocDAI.minCollateralizationRatio}\n        oracle={mainnetParams.ocDAI.oracle}\n      />\n    </Main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}