{"version":3,"sources":["constants/addresses.js","components/Dashboard/index.js","utils/graph.js","utils/common.js","utils/infura.js","utils/blockNative.js","utils/web3.js","components/TokenView/VaultOwnerList.js","components/TokenView/ConnectButton.js","components/TokenView/VaultInfoBox.js","components/TokenView/index.js","App.js","serviceWorker.js","index.js"],"names":["supportedList","addr","name","DashBoard","history","useHistory","primary","fields","entries","entriesPerPage","renderEntry","entity","shorten","onClick","push","goToToken","opynGraphEndpoint","getAllVaultOwners","a","options","method","headers","body","JSON","stringify","query","fetch","res","json","actions","data","vaultOpenedActions","owners","map","action","owner","Set","formatDigits","num","percision","parseFloat","toFixed","optionContractABI","require","oracleABI","Promise","web3","Web3","getOptionContractDetail","oToken","all","getERC20Info","getBalance","getAssetsAndOracle","tokenInfo","balance","optionInfo","decimals","totalSupply","oracle","underlying","strike","minRatio","getVaults","oTokenContract","eth","Contract","methods","getVault","call","collateral","utils","fromWei","oTokensIssued","owned","filter","vault","vaults","getVaultsWithLiquidatable","maxLiquidatable","isUnsafe","maxOTokensLiquidatable","NewVaults","sort","compare","address","token","totalSupplyDecimals","parseInt","COMPOUND_ORACLE","minCollateralizationRatio","minRatioObj","getPrice","oracleAddr","price","ownerA","ownerB","rateA","ratio","rateB","comparison","notify","Notify","dappId","networkId","oTokenABI","liquidate","oTokenAddr","window","ethereum","enable","accounts","balanceOf","userbalance","maxToSend","Math","min","toString","send","from","on","hash","VaultOwnerList","state","isLoading","underlyingPrice","componentDidMount","props","vaultDetail","valueProtectingInEth","isSafe","vaultWithLiquidatable","setState","heading","status","this","background","color","mode","console","log","Component","ConnectButton","connectWeb3","isConnected","account","connectedAccount","VaultBox","supply","secondary","padding","tokenName","TokenView","useParams","App","path","children","Dashboard","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3bef7fae.chunk.js","sourcesContent":["export const supportedList = [\n  {\n    addr: '0xddac4aed7c8f73032b388efe2c778fc194bc81ed',\n    name: 'cDai Insurance',\n  },\n  {\n    addr: '0x98cc3bd6af1880fcfda17ac477b2f612980e5e33',\n    name: 'cDai Insurance',\n  },\n  {\n    addr: '0x8ed9f862363ffdfd3a07546e618214b6d59f03d4',\n    name: 'cUSDC Insurance'\n  },\n  {\n    addr: '0x4ba8c6ce0e855c051e65dfc37883360efaf7c82b',\n    name: 'y.curve.fi Insurance'\n  },\n]","import React from 'react';\nimport { useHistory } from 'react-router-dom'\nimport { supportedList } from '../../constants/addresses'\n\nimport { Header, DataView, IdentityBadge, Button } from '@aragon/ui'\n\nfunction DashBoard() {\n    const history = useHistory();\n    const goToToken = (addr) =>{\n      history.push(`token/${addr}`)\n    }\n    return (\n      <>\n        <Header primary='All Insurances' />\n        <DataView\n        fields={[ 'Name', 'Contract', 'Detail']}\n        entries={supportedList}\n        entriesPerPage={6}\n        renderEntry={( {addr, name} ) => {\n          return [\n            <>{name}</>,\n            <IdentityBadge entity={addr} shorten={false} />,\n            <Button onClick={() => goToToken(addr)}> Manage </Button>\n          ];\n        }}\n        />\n      </>\n    );\n  \n}\n\nexport default DashBoard;","// const prefix = 'https://cors-anywhere-anton.herokuapp.com/';\nconst opynGraphEndpoint = 'https://api.thegraph.com/subgraphs/name/aparnakr/opyn'\n\n/**\n * @return {Promise<Array<string>>}\n */\nexport async function getAllVaultOwners(){\n  const query = `{\n    vaultOpenedActions(first: 100, ) {\n      owner\n    }\n  }`\n  const options = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ query }),\n  }\n  const res = await fetch(opynGraphEndpoint,  options)\n  const actions = (await res.json()).data.vaultOpenedActions\n  const owners = actions.map(action => action.owner)\n  return [...new Set(owners)]\n\n  // return [\"0xfb338c5fe584c026270e5ded1c2e0aca786a22fe\" ,\"0x7e5ce10826ee167de897d262fcc9976f609ecd2b\" ,\"0xabc04058e20c9cba4f360244648fedf30cebc3b4\" ,\"0x97c7c0c55a4ae424e9164bbc5cf8aa139cae5eec\" ,\"0x78353498a7c2741d52de5ef45e58bd17148a6297\" ,\"0x81bb32e4a7e4d0500d11a52f3a5f60c9a6ef126c\" ,\"0xd4c80637f45a55b5e1afa9cd0c935395063d4523\" ,\"0x855328ee5e94924cb83b267f25a513c2a2fc3e5e\"]\n}","export function formatDigits(num, percision) {\n  return parseFloat(num).toFixed(percision)\n}","import Web3 from 'web3';\nimport { formatDigits } from './common'\n\nconst optionContractABI = require('../constants/abi/OptionContract.json')\nconst oracleABI = require('../constants/abi/Oracle.json')\n\nconst Promise = require('bluebird');\nconst web3 = new Web3('https://mainnet.infura.io/v3/44fd23cda65746a699a5d3c0e2fa45d5');\n\n/**\n * Call only once\n * @param {*} oToken\n */\nexport const getOptionContractDetail = async (oToken) => {\n  const [tokenInfo, balance, optionInfo] = await Promise.all([\n    getERC20Info(oToken),\n    getBalance(oToken), \n    getAssetsAndOracle(oToken)]\n  );\n  return {\n    name: tokenInfo.name,\n    decimals: tokenInfo.decimals,\n    totalSupply: tokenInfo.totalSupply,\n    oracle: optionInfo.oracle,\n    underlying: optionInfo.underlying,\n    strike: optionInfo.strike,\n    minRatio: optionInfo.minRatio,\n    balance,\n  };\n};\n\n/**\n *\n * @param {Array<string>} owners\n * @param {string} oToken\n */\nexport const getVaults = async (owners, oToken) => {\n  const oTokenContract = new web3.eth.Contract(optionContractABI, oToken);\n\n  const vaults = await Promise.map(owners, async (owner) => {\n    const res = await oTokenContract.methods.getVault(owner).call();\n    const collateral = formatDigits(web3.utils.fromWei(res[0]), 6);\n    const oTokensIssued = res[1];\n    const underlying = res[2];\n    const owned = res[3];\n    return { collateral, oTokensIssued, underlying, owned, owner };\n  }).filter((vault) => vault.owned && parseFloat(vault.collateral) > 0)\n  \n    return vaults \n};\n\nexport const getVaultsWithLiquidatable = async(vaults, oToken) => {\n  const oTokenContract = new web3.eth.Contract(optionContractABI, oToken);\n  const NewVaults = await Promise.map(vaults, async(vault) => {\n    let maxLiquidatable = 0\n    if(vault.isUnsafe) {\n      maxLiquidatable = await oTokenContract.methods\n        .maxOTokensLiquidatable(vault.owner)\n        .call();\n    }\n    vault.maxLiquidatable = maxLiquidatable\n    return vault\n  })\n  return NewVaults.sort(compare);\n}\n\nexport const getERC20Info = async(address) => {\n  const token = new web3.eth.Contract(optionContractABI, address);\n  const name = await token.methods.name().call();\n  const totalSupplyDecimals = await token.methods.totalSupply().call();\n  const decimals = await token.methods.decimals().call();\n  const totalSupply = parseInt(totalSupplyDecimals) / 10 ** parseInt(decimals);\n  return { name, decimals, totalSupply }\n}\n\nexport const getAssetsAndOracle = async(address) => {\n  const token = new web3.eth.Contract(optionContractABI, address);\n  const [oracle, underlying, strike, minRatioObj] = await Promise.all([\n    token.methods.COMPOUND_ORACLE().call(),\n    token.methods.underlying().call(),\n    token.methods.strike().call(),\n    token.methods.minCollateralizationRatio().call()\n  ]) \n  const minRatio =  minRatioObj[0] * (10 ** minRatioObj[1])\n  return { oracle, underlying, strike, minRatio }\n}\n\n/**\n * Get balance of accounts\n * @param {string} address\n */\nexport const getBalance = async (address) => {\n  const balance = await web3.eth.getBalance(address);\n  return web3.utils.fromWei(balance);\n};\n\nexport const getPrice = async (oracleAddr, token) => {\n  const oracle = new web3.eth.Contract(oracleABI, oracleAddr);\n  const price = await oracle.methods.getPrice(token).call();\n  return web3.utils.fromWei(price); // price base eth/ per token\n};\n\n\nfunction compare(ownerA, ownerB) {\n  const rateA = ownerA.ratio;\n  const rateB = ownerB.ratio;\n\n  let comparison = 0;\n  if (rateA > rateB) {\n    comparison = 1;\n  } else if (rateA < rateB) {\n    comparison = -1;\n  }\n  return comparison;\n}\n","import Notify from \"bnc-notify\"\n\nexport const notify = Notify({\n  dappId: '7e7c9d55-dd5e-4ee1-bc38-edf27b59ce06',\n  networkId: 1\n});\n\n","import Web3 from 'web3'\nimport { notify } from './blockNative'\nconst oTokenABI = require('../constants/abi/OptionContract.json')\n\nexport const liquidate = async(oTokenAddr, owner, maxLiquidatable) => {\n  const accounts = await window.ethereum.enable();\n  const web3 = new Web3(window.ethereum);\n  const oToken = new web3.eth.Contract(oTokenABI, oTokenAddr)\n  const userbalance = await oToken.methods.balanceOf(accounts[0]).call()\n  const maxToSend = Math.min(\n      parseInt(userbalance, 10), \n      parseInt(maxLiquidatable, 10)\n  ).toString();\n  \n  await oToken.methods.liquidate(owner, maxToSend).send({from: accounts[0]})\n    .on('transactionHash', (hash)=>{\n      notify.hash(hash)\n    })\n}","import React, { Component } from 'react';\nimport { Tag, DataView, IdentityBadge, LinkBase } from '@aragon/ui';\nimport { getAllVaultOwners } from '../../utils/graph';\nimport {\n  getOptionContractDetail,\n  getVaults,\n  getPrice,\n  getVaultsWithLiquidatable,\n} from '../../utils/infura';\nimport { liquidate } from '../../utils/web3';\nimport { formatDigits } from '../../utils/common';\n\nclass VaultOwnerList extends Component {\n  state = {\n    isLoading: true,\n    underlyingPrice: '0',\n    vaults: [], // { account, maxLiquidatable, collateral, oTokensIssued, ratio } []\n  };\n\n  componentDidMount = async () => {\n    const owners = await getAllVaultOwners();\n    const { oracle, underlying, decimals, minRatio } = await getOptionContractDetail(\n      this.props.oToken\n    );\n    const vaults = await getVaults(owners, this.props.oToken);\n\n    const underlyingPrice = await getPrice(oracle, underlying);\n\n    const vaultDetail = vaults.map((vault) => {\n      const oTokensIssued = formatDigits(parseInt(vault.oTokensIssued) / 10 ** decimals, 4);\n      const valueProtectingInEth = parseFloat(underlyingPrice) * oTokensIssued;\n      const ratio = formatDigits(parseFloat(vault.collateral) / valueProtectingInEth, 4);\n      vault.oTokensIssued = oTokensIssued;\n      vault.ratio = ratio;\n      vault.isSafe = ratio > minRatio;\n      return vault;\n    });\n\n    const vaultWithLiquidatable = await getVaultsWithLiquidatable(vaultDetail);\n    this.setState({\n      vaults: vaultWithLiquidatable,\n      isLoading: false,\n      underlyingPrice,\n    });\n  };\n\n  render() {\n    return (\n      <DataView\n        heading={<h3> All Vaults </h3>}\n        status={this.state.isLoading ? 'loading' : 'default'}\n        fields={['Owner', 'Collecteral', 'Issued', 'RATIO', 'Status']}\n        entries={this.state.vaults}\n        entriesPerPage={6}\n        renderEntry={({ owner, collateral, oTokensIssued, ratio, maxLiquidatable, isSafe }) => {\n          return [\n            <IdentityBadge entity={owner} shorten={true} />,\n            collateral,\n            oTokensIssued,\n            ratio,\n            isSafe ? (\n              ratio < 1.7 ? (\n                <Tag background='#FFEBAD' color='#FEC100'>\n                  {' '}\n                  Danger{' '}\n                </Tag>\n              ) : (\n                <Tag mode='new'> safe </Tag>\n              )\n            ) : (\n              <LinkBase\n                onClick={() => {\n                  console.log(`can liquidate max ${maxLiquidatable}`);\n                  liquidate(this.props.oToken, owner, maxLiquidatable);\n                }}\n              >\n                <Tag color='#E34343' background='#FFC6C6'>\n                  Unsafe!\n                </Tag>\n              </LinkBase>\n            ),\n          ];\n        }}\n      />\n    );\n  }\n}\n\nexport default VaultOwnerList;\n","import React, { Component } from 'react';\nimport { Button, IdentityBadge } from '@aragon/ui';\n\nclass ConnectButton extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isConnected: false,\n      account: '',\n    };\n  }\n\n  connectWeb3 = async () => {\n    const accounts = await window.ethereum.enable();\n    this.setState({\n      isConnected: true,\n      account: accounts[0],\n    });\n    return true;\n  };\n\n  render() {\n    return this.state.isConnected ? (\n      <IdentityBadge entity={this.state.account} connectedAccount />\n    ) : (\n      <Button onClick={this.connectWeb3}> Connect </Button>\n    );\n  }\n}\n\nexport default ConnectButton;\n","import React, { Component } from 'react';\nimport { Box, Split, Header, IdentityBadge } from '@aragon/ui';\nimport ConnectButton from './ConnectButton';\nimport { getOptionContractDetail } from '../../utils/infura';\n\nclass VaultBox extends Component {\n  state = {\n    name: 'oToken',\n    balance: '0',\n    supply: '0',\n  };\n\n  async componentDidMount() {\n    const { balance, totalSupply, name } = await getOptionContractDetail(this.props.oToken);\n    this.setState({ balance, supply: totalSupply, name });\n  }\n\n  render() {\n    return (\n      <>\n        <Header primary={this.state.name} secondary={<ConnectButton />} />\n        <Split\n          primary={\n            <Split\n              primary={\n                <Box heading={'contract'} padding={30}>\n                  <IdentityBadge entity={this.props.oToken} shorten={false} />\n                </Box>\n              }\n              secondary={\n                <Box heading={'balance'} padding={30}>\n                  {this.state.balance}\n                </Box>\n              }\n            />\n          }\n          secondary={\n            <Box heading={'supply'} padding={30}>\n              {this.state.supply} {this.props.tokenName}\n            </Box>\n          }\n        />\n      </>\n    );\n  }\n}\n\nexport default VaultBox;\n","import React from 'react';\n\nimport { useParams } from 'react-router-dom';\n\nimport VaultOwnerList from './VaultOwnerList';\nimport Overview from './VaultInfoBox';\n\nfunction TokenView() {\n  let { addr } = useParams();\n  return (\n    <>\n      <Overview oToken={addr} />\n      <VaultOwnerList oToken={addr} />\n    </>\n  );\n}\n\nexport default TokenView;\n","import React from 'react';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom'\nimport Dashboard from './components/Dashboard'\nimport TokenView from './components/TokenView'\nimport { Main } from '@aragon/ui'\nimport './App.css';\n\nfunction App() {\n  return (\n    <Main>\n      <Router>\n        <Switch>\n          <Route path='/token/:addr' children={<TokenView/>}/>\n          <Route path='/' children={<Dashboard/>}/>\n        </Switch>\n      </Router>\n    </Main>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}